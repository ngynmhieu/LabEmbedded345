
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000448c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f90  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075a4  080075a4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080075a4  080075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075ac  080075ac  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075ac  080075ac  000175ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080075b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          000001a0  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012249  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b20  00000000  00000000  00032299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00034dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  00035c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224e4  00000000  00000000  00036a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b0a  00000000  00000000  00058eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd12a  00000000  00000000  0006a9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00137b20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c30  00000000  00000000  00137b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080045fc 	.word	0x080045fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080045fc 	.word	0x080045fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2108      	movs	r1, #8
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <button_init+0x14>)
 80004ca:	f002 f8d3 	bl	8002674 <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2108      	movs	r1, #8
 80004e2:	482f      	ldr	r0, [pc, #188]	; (80005a0 <button_Scan+0xc8>)
 80004e4:	f002 f8c6 	bl	8002674 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2108      	movs	r1, #8
 80004ec:	482c      	ldr	r0, [pc, #176]	; (80005a0 <button_Scan+0xc8>)
 80004ee:	f002 f8c1 	bl	8002674 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f2:	230a      	movs	r3, #10
 80004f4:	2202      	movs	r2, #2
 80004f6:	492b      	ldr	r1, [pc, #172]	; (80005a4 <button_Scan+0xcc>)
 80004f8:	482b      	ldr	r0, [pc, #172]	; (80005a8 <button_Scan+0xd0>)
 80004fa:	f002 feda 	bl	80032b2 <HAL_SPI_Receive>
	  int button_index = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000506:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	e03f      	b.n	800058e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db06      	blt.n	8000522 <button_Scan+0x4a>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b03      	cmp	r3, #3
 8000518:	dc03      	bgt.n	8000522 <button_Scan+0x4a>
			  button_index = i + 4;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e018      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b03      	cmp	r3, #3
 8000526:	dd07      	ble.n	8000538 <button_Scan+0x60>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b07      	cmp	r3, #7
 800052c:	dc04      	bgt.n	8000538 <button_Scan+0x60>
			  button_index = 7 - i;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f1c3 0307 	rsb	r3, r3, #7
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	e00d      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dd06      	ble.n	800054c <button_Scan+0x74>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0b      	cmp	r3, #11
 8000542:	dc03      	bgt.n	800054c <button_Scan+0x74>
			  button_index = i + 4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3304      	adds	r3, #4
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e003      	b.n	8000554 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f1c3 0317 	rsb	r3, r3, #23
 8000552:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <button_Scan+0xcc>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	897b      	ldrh	r3, [r7, #10]
 800055a:	4013      	ands	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d005      	beq.n	800056e <button_Scan+0x96>
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <button_Scan+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2100      	movs	r1, #0
 8000568:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800056c:	e009      	b.n	8000582 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <button_Scan+0xd4>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000576:	3301      	adds	r3, #1
 8000578:	b299      	uxth	r1, r3
 800057a:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <button_Scan+0xd4>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000582:	897b      	ldrh	r3, [r7, #10]
 8000584:	085b      	lsrs	r3, r3, #1
 8000586:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	ddbc      	ble.n	800050e <button_Scan+0x36>
	  }
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	2000003c 	.word	0x2000003c
 80005a8:	2000011c 	.word	0x2000011c
 80005ac:	20000060 	.word	0x20000060

080005b0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08e      	sub	sp, #56	; 0x38
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
 80005d8:	615a      	str	r2, [r3, #20]
 80005da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005dc:	4b2f      	ldr	r3, [pc, #188]	; (800069c <MX_FSMC_Init+0xec>)
 80005de:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80005e2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005e4:	4b2d      	ldr	r3, [pc, #180]	; (800069c <MX_FSMC_Init+0xec>)
 80005e6:	4a2e      	ldr	r2, [pc, #184]	; (80006a0 <MX_FSMC_Init+0xf0>)
 80005e8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <MX_FSMC_Init+0xec>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <MX_FSMC_Init+0xec>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <MX_FSMC_Init+0xec>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <MX_FSMC_Init+0xec>)
 80005fe:	2210      	movs	r2, #16
 8000600:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <MX_FSMC_Init+0xec>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_FSMC_Init+0xec>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <MX_FSMC_Init+0xec>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_FSMC_Init+0xec>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <MX_FSMC_Init+0xec>)
 800061c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_FSMC_Init+0xec>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_FSMC_Init+0xec>)
 800062a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_FSMC_Init+0xec>)
 8000632:	2200      	movs	r2, #0
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_FSMC_Init+0xec>)
 8000638:	2200      	movs	r2, #0
 800063a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_FSMC_Init+0xec>)
 800063e:	2200      	movs	r2, #0
 8000640:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000642:	230f      	movs	r3, #15
 8000644:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000646:	230f      	movs	r3, #15
 8000648:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800064a:	233c      	movs	r3, #60	; 0x3c
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000652:	2310      	movs	r3, #16
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000656:	2311      	movs	r3, #17
 8000658:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800065a:	2300      	movs	r3, #0
 800065c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800065e:	2308      	movs	r3, #8
 8000660:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000662:	230f      	movs	r3, #15
 8000664:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000666:	2309      	movs	r3, #9
 8000668:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800066e:	2310      	movs	r3, #16
 8000670:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000672:	2311      	movs	r3, #17
 8000674:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800067a:	463a      	mov	r2, r7
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	4806      	ldr	r0, [pc, #24]	; (800069c <MX_FSMC_Init+0xec>)
 8000684:	f003 f9f8 	bl	8003a78 <HAL_SRAM_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800068e:	f001 fa97 	bl	8001bc0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000692:	bf00      	nop
 8000694:	3738      	adds	r7, #56	; 0x38
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000080 	.word	0x20000080
 80006a0:	a0000104 	.word	0xa0000104

080006a4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <HAL_FSMC_MspInit+0x88>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d131      	bne.n	8000724 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <HAL_FSMC_MspInit+0x88>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <HAL_FSMC_MspInit+0x8c>)
 80006cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <HAL_FSMC_MspInit+0x8c>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6393      	str	r3, [r2, #56]	; 0x38
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_FSMC_MspInit+0x8c>)
 80006d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006e2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80006e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006f4:	230c      	movs	r3, #12
 80006f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <HAL_FSMC_MspInit+0x90>)
 80006fe:	f001 fe1d 	bl	800233c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000702:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000706:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000714:	230c      	movs	r3, #12
 8000716:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4619      	mov	r1, r3
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <HAL_FSMC_MspInit+0x94>)
 800071e:	f001 fe0d 	bl	800233c <HAL_GPIO_Init>
 8000722:	e000      	b.n	8000726 <HAL_FSMC_MspInit+0x82>
    return;
 8000724:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000040 	.word	0x20000040
 8000730:	40023800 	.word	0x40023800
 8000734:	40021000 	.word	0x40021000
 8000738:	40020c00 	.word	0x40020c00

0800073c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000744:	f7ff ffae 	bl	80006a4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4b6f      	ldr	r3, [pc, #444]	; (8000928 <MX_GPIO_Init+0x1d8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a6e      	ldr	r2, [pc, #440]	; (8000928 <MX_GPIO_Init+0x1d8>)
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b6c      	ldr	r3, [pc, #432]	; (8000928 <MX_GPIO_Init+0x1d8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0310 	and.w	r3, r3, #16
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b68      	ldr	r3, [pc, #416]	; (8000928 <MX_GPIO_Init+0x1d8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a67      	ldr	r2, [pc, #412]	; (8000928 <MX_GPIO_Init+0x1d8>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b65      	ldr	r3, [pc, #404]	; (8000928 <MX_GPIO_Init+0x1d8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b61      	ldr	r3, [pc, #388]	; (8000928 <MX_GPIO_Init+0x1d8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a60      	ldr	r2, [pc, #384]	; (8000928 <MX_GPIO_Init+0x1d8>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b5e      	ldr	r3, [pc, #376]	; (8000928 <MX_GPIO_Init+0x1d8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b5a      	ldr	r3, [pc, #360]	; (8000928 <MX_GPIO_Init+0x1d8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a59      	ldr	r2, [pc, #356]	; (8000928 <MX_GPIO_Init+0x1d8>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b57      	ldr	r3, [pc, #348]	; (8000928 <MX_GPIO_Init+0x1d8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b53      	ldr	r3, [pc, #332]	; (8000928 <MX_GPIO_Init+0x1d8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a52      	ldr	r2, [pc, #328]	; (8000928 <MX_GPIO_Init+0x1d8>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b50      	ldr	r3, [pc, #320]	; (8000928 <MX_GPIO_Init+0x1d8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b4c      	ldr	r3, [pc, #304]	; (8000928 <MX_GPIO_Init+0x1d8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a4b      	ldr	r2, [pc, #300]	; (8000928 <MX_GPIO_Init+0x1d8>)
 80007fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b49      	ldr	r3, [pc, #292]	; (8000928 <MX_GPIO_Init+0x1d8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b45      	ldr	r3, [pc, #276]	; (8000928 <MX_GPIO_Init+0x1d8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a44      	ldr	r2, [pc, #272]	; (8000928 <MX_GPIO_Init+0x1d8>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b42      	ldr	r3, [pc, #264]	; (8000928 <MX_GPIO_Init+0x1d8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2170      	movs	r1, #112	; 0x70
 800082e:	483f      	ldr	r0, [pc, #252]	; (800092c <MX_GPIO_Init+0x1dc>)
 8000830:	f001 ff20 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083a:	483d      	ldr	r0, [pc, #244]	; (8000930 <MX_GPIO_Init+0x1e0>)
 800083c:	f001 ff1a 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2140      	movs	r1, #64	; 0x40
 8000844:	483b      	ldr	r0, [pc, #236]	; (8000934 <MX_GPIO_Init+0x1e4>)
 8000846:	f001 ff15 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000850:	4839      	ldr	r0, [pc, #228]	; (8000938 <MX_GPIO_Init+0x1e8>)
 8000852:	f001 ff0f 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	4838      	ldr	r0, [pc, #224]	; (800093c <MX_GPIO_Init+0x1ec>)
 800085c:	f001 ff0a 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000860:	2370      	movs	r3, #112	; 0x70
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	482d      	ldr	r0, [pc, #180]	; (800092c <MX_GPIO_Init+0x1dc>)
 8000878:	f001 fd60 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4826      	ldr	r0, [pc, #152]	; (8000930 <MX_GPIO_Init+0x1e0>)
 8000896:	f001 fd51 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800089a:	23c0      	movs	r3, #192	; 0xc0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4822      	ldr	r0, [pc, #136]	; (8000938 <MX_GPIO_Init+0x1e8>)
 80008ae:	f001 fd45 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80008b2:	2330      	movs	r3, #48	; 0x30
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	481a      	ldr	r0, [pc, #104]	; (8000930 <MX_GPIO_Init+0x1e0>)
 80008c6:	f001 fd39 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4814      	ldr	r0, [pc, #80]	; (8000934 <MX_GPIO_Init+0x1e4>)
 80008e2:	f001 fd2b 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	480e      	ldr	r0, [pc, #56]	; (8000938 <MX_GPIO_Init+0x1e8>)
 8000900:	f001 fd1c 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000904:	2308      	movs	r3, #8
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <MX_GPIO_Init+0x1ec>)
 800091c:	f001 fd0e 	bl	800233c <HAL_GPIO_Init>

}
 8000920:	bf00      	nop
 8000922:	3730      	adds	r7, #48	; 0x30
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40021000 	.word	0x40021000
 8000930:	40020800 	.word	0x40020800
 8000934:	40021800 	.word	0x40021800
 8000938:	40020000 	.word	0x40020000
 800093c:	40020c00 	.word	0x40020c00

08000940 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800094a:	4a04      	ldr	r2, [pc, #16]	; (800095c <LCD_WR_REG+0x1c>)
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	8013      	strh	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	600ffffe 	.word	0x600ffffe

08000960 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <LCD_WR_DATA+0x1c>)
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	8053      	strh	r3, [r2, #2]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	600ffffe 	.word	0x600ffffe

08000980 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <LCD_RD_DATA+0x20>)
 8000988:	885b      	ldrh	r3, [r3, #2]
 800098a:	b29b      	uxth	r3, r3
 800098c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	b29b      	uxth	r3, r3
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	600ffffe 	.word	0x600ffffe

080009a4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4604      	mov	r4, r0
 80009ac:	4608      	mov	r0, r1
 80009ae:	4611      	mov	r1, r2
 80009b0:	461a      	mov	r2, r3
 80009b2:	4623      	mov	r3, r4
 80009b4:	80fb      	strh	r3, [r7, #6]
 80009b6:	4603      	mov	r3, r0
 80009b8:	80bb      	strh	r3, [r7, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	807b      	strh	r3, [r7, #2]
 80009be:	4613      	mov	r3, r2
 80009c0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80009c2:	202a      	movs	r0, #42	; 0x2a
 80009c4:	f7ff ffbc 	bl	8000940 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	0a1b      	lsrs	r3, r3, #8
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ffc6 	bl	8000960 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	b29b      	uxth	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ffc0 	bl	8000960 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80009e0:	887b      	ldrh	r3, [r7, #2]
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ffba 	bl	8000960 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ffb4 	bl	8000960 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80009f8:	202b      	movs	r0, #43	; 0x2b
 80009fa:	f7ff ffa1 	bl	8000940 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ffab 	bl	8000960 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000a0a:	88bb      	ldrh	r3, [r7, #4]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ffa5 	bl	8000960 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000a16:	883b      	ldrh	r3, [r7, #0]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff9f 	bl	8000960 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000a22:	883b      	ldrh	r3, [r7, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff99 	bl	8000960 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000a2e:	202c      	movs	r0, #44	; 0x2c
 8000a30:	f7ff ff86 	bl	8000940 <LCD_WR_REG>
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd90      	pop	{r4, r7, pc}

08000a3c <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4604      	mov	r4, r0
 8000a44:	4608      	mov	r0, r1
 8000a46:	4611      	mov	r1, r2
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4623      	mov	r3, r4
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80bb      	strh	r3, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	807b      	strh	r3, [r7, #2]
 8000a56:	4613      	mov	r3, r2
 8000a58:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000a5a:	887b      	ldrh	r3, [r7, #2]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	883b      	ldrh	r3, [r7, #0]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	88b9      	ldrh	r1, [r7, #4]
 8000a68:	88f8      	ldrh	r0, [r7, #6]
 8000a6a:	f7ff ff9b 	bl	80009a4 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000a6e:	88bb      	ldrh	r3, [r7, #4]
 8000a70:	81fb      	strh	r3, [r7, #14]
 8000a72:	e010      	b.n	8000a96 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	81bb      	strh	r3, [r7, #12]
 8000a78:	e006      	b.n	8000a88 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000a7a:	8c3b      	ldrh	r3, [r7, #32]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff6f 	bl	8000960 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000a82:	89bb      	ldrh	r3, [r7, #12]
 8000a84:	3301      	adds	r3, #1
 8000a86:	81bb      	strh	r3, [r7, #12]
 8000a88:	89ba      	ldrh	r2, [r7, #12]
 8000a8a:	887b      	ldrh	r3, [r7, #2]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d3f4      	bcc.n	8000a7a <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	3301      	adds	r3, #1
 8000a94:	81fb      	strh	r3, [r7, #14]
 8000a96:	89fa      	ldrh	r2, [r7, #14]
 8000a98:	883b      	ldrh	r3, [r7, #0]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3ea      	bcc.n	8000a74 <lcd_Fill+0x38>
		}
	}
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	80bb      	strh	r3, [r7, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000aba:	88bb      	ldrh	r3, [r7, #4]
 8000abc:	88fa      	ldrh	r2, [r7, #6]
 8000abe:	88b9      	ldrh	r1, [r7, #4]
 8000ac0:	88f8      	ldrh	r0, [r7, #6]
 8000ac2:	f7ff ff6f 	bl	80009a4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000ac6:	887b      	ldrh	r3, [r7, #2]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff49 	bl	8000960 <LCD_WR_DATA>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4604      	mov	r4, r0
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	4603      	mov	r3, r0
 8000aec:	80bb      	strh	r3, [r7, #4]
 8000aee:	460b      	mov	r3, r1
 8000af0:	70fb      	strb	r3, [r7, #3]
 8000af2:	4613      	mov	r3, r2
 8000af4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000afe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b02:	085b      	lsrs	r3, r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	f003 0307 	and.w	r3, r3, #7
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf14      	ite	ne
 8000b1a:	2301      	movne	r3, #1
 8000b1c:	2300      	moveq	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	fb12 f303 	smulbb	r3, r2, r3
 8000b2e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	3b20      	subs	r3, #32
 8000b34:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b29c      	uxth	r4, r3
 8000b44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	88bb      	ldrh	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	3b01      	subs	r3, #1
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	88b9      	ldrh	r1, [r7, #4]
 8000b56:	88f8      	ldrh	r0, [r7, #6]
 8000b58:	4622      	mov	r2, r4
 8000b5a:	f7ff ff23 	bl	80009a4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
 8000b62:	e07a      	b.n	8000c5a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000b64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b68:	2b0c      	cmp	r3, #12
 8000b6a:	d028      	beq.n	8000bbe <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000b6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b70:	2b10      	cmp	r3, #16
 8000b72:	d108      	bne.n	8000b86 <lcd_ShowChar+0xae>
 8000b74:	78fa      	ldrb	r2, [r7, #3]
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	493c      	ldr	r1, [pc, #240]	; (8000c6c <lcd_ShowChar+0x194>)
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	440a      	add	r2, r1
 8000b7e:	4413      	add	r3, r2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	75fb      	strb	r3, [r7, #23]
 8000b84:	e01b      	b.n	8000bbe <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000b86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b8a:	2b18      	cmp	r3, #24
 8000b8c:	d10b      	bne.n	8000ba6 <lcd_ShowChar+0xce>
 8000b8e:	78fa      	ldrb	r2, [r7, #3]
 8000b90:	8a79      	ldrh	r1, [r7, #18]
 8000b92:	4837      	ldr	r0, [pc, #220]	; (8000c70 <lcd_ShowChar+0x198>)
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	4403      	add	r3, r0
 8000b9e:	440b      	add	r3, r1
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	75fb      	strb	r3, [r7, #23]
 8000ba4:	e00b      	b.n	8000bbe <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000ba6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000baa:	2b20      	cmp	r3, #32
 8000bac:	d15a      	bne.n	8000c64 <lcd_ShowChar+0x18c>
 8000bae:	78fa      	ldrb	r2, [r7, #3]
 8000bb0:	8a7b      	ldrh	r3, [r7, #18]
 8000bb2:	4930      	ldr	r1, [pc, #192]	; (8000c74 <lcd_ShowChar+0x19c>)
 8000bb4:	0192      	lsls	r2, r2, #6
 8000bb6:	440a      	add	r2, r1
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	75bb      	strb	r3, [r7, #22]
 8000bc2:	e044      	b.n	8000c4e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d120      	bne.n	8000c0e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000bcc:	7dfa      	ldrb	r2, [r7, #23]
 8000bce:	7dbb      	ldrb	r3, [r7, #22]
 8000bd0:	fa42 f303 	asr.w	r3, r2, r3
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d004      	beq.n	8000be6 <lcd_ShowChar+0x10e>
 8000bdc:	883b      	ldrh	r3, [r7, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff febe 	bl	8000960 <LCD_WR_DATA>
 8000be4:	e003      	b.n	8000bee <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000be6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff feb9 	bl	8000960 <LCD_WR_DATA>
				m++;
 8000bee:	7d7b      	ldrb	r3, [r7, #21]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000bf4:	7d7b      	ldrb	r3, [r7, #21]
 8000bf6:	7bfa      	ldrb	r2, [r7, #15]
 8000bf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000bfc:	fb02 f201 	mul.w	r2, r2, r1
 8000c00:	1a9b      	subs	r3, r3, r2
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d11f      	bne.n	8000c48 <lcd_ShowChar+0x170>
				{
					m=0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	757b      	strb	r3, [r7, #21]
					break;
 8000c0c:	e022      	b.n	8000c54 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000c0e:	7dfa      	ldrb	r2, [r7, #23]
 8000c10:	7dbb      	ldrb	r3, [r7, #22]
 8000c12:	fa42 f303 	asr.w	r3, r2, r3
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d005      	beq.n	8000c2a <lcd_ShowChar+0x152>
 8000c1e:	883a      	ldrh	r2, [r7, #0]
 8000c20:	88b9      	ldrh	r1, [r7, #4]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff3f 	bl	8000aa8 <lcd_DrawPoint>
				x++;
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000c30:	88fa      	ldrh	r2, [r7, #6]
 8000c32:	8a3b      	ldrh	r3, [r7, #16]
 8000c34:	1ad2      	subs	r2, r2, r3
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d105      	bne.n	8000c48 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000c3c:	8a3b      	ldrh	r3, [r7, #16]
 8000c3e:	80fb      	strh	r3, [r7, #6]
					y++;
 8000c40:	88bb      	ldrh	r3, [r7, #4]
 8000c42:	3301      	adds	r3, #1
 8000c44:	80bb      	strh	r3, [r7, #4]
					break;
 8000c46:	e005      	b.n	8000c54 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000c48:	7dbb      	ldrb	r3, [r7, #22]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	75bb      	strb	r3, [r7, #22]
 8000c4e:	7dbb      	ldrb	r3, [r7, #22]
 8000c50:	2b07      	cmp	r3, #7
 8000c52:	d9b7      	bls.n	8000bc4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000c54:	8a7b      	ldrh	r3, [r7, #18]
 8000c56:	3301      	adds	r3, #1
 8000c58:	827b      	strh	r3, [r7, #18]
 8000c5a:	8a7a      	ldrh	r2, [r7, #18]
 8000c5c:	89bb      	ldrh	r3, [r7, #12]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d380      	bcc.n	8000b64 <lcd_ShowChar+0x8c>
 8000c62:	e000      	b.n	8000c66 <lcd_ShowChar+0x18e>
		else return;
 8000c64:	bf00      	nop
				}
			}
		}
	}
}
 8000c66:	371c      	adds	r7, #28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	08004614 	.word	0x08004614
 8000c70:	08004c04 	.word	0x08004c04
 8000c74:	08005dd4 	.word	0x08005dd4

08000c78 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000c8c:	e004      	b.n	8000c98 <mypow+0x20>
 8000c8e:	79fa      	ldrb	r2, [r7, #7]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	1e5a      	subs	r2, r3, #1
 8000c9c:	71ba      	strb	r2, [r7, #6]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f5      	bne.n	8000c8e <mypow+0x16>
	return result;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af04      	add	r7, sp, #16
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	4608      	mov	r0, r1
 8000cba:	4611      	mov	r1, r2
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	80fb      	strh	r3, [r7, #6]
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80bb      	strh	r3, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	807b      	strh	r3, [r7, #2]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000cd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cd6:	085b      	lsrs	r3, r3, #1
 8000cd8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
 8000cde:	e059      	b.n	8000d94 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000ce0:	887c      	ldrh	r4, [r7, #2]
 8000ce2:	787a      	ldrb	r2, [r7, #1]
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4619      	mov	r1, r3
 8000cf0:	200a      	movs	r0, #10
 8000cf2:	f7ff ffc1 	bl	8000c78 <mypow>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	fbb4 f1f3 	udiv	r1, r4, r3
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <lcd_ShowIntNum+0xf8>)
 8000cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8000d02:	08da      	lsrs	r2, r3, #3
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	1aca      	subs	r2, r1, r3
 8000d0e:	4613      	mov	r3, r2
 8000d10:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000d12:	7bbb      	ldrb	r3, [r7, #14]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d121      	bne.n	8000d5c <lcd_ShowIntNum+0xac>
 8000d18:	7bfa      	ldrb	r2, [r7, #15]
 8000d1a:	787b      	ldrb	r3, [r7, #1]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	da1c      	bge.n	8000d5c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000d22:	7b3b      	ldrb	r3, [r7, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d117      	bne.n	8000d58 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	7b7b      	ldrb	r3, [r7, #13]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	fb12 f303 	smulbb	r3, r2, r3
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	4413      	add	r3, r2
 8000d3a:	b298      	uxth	r0, r3
 8000d3c:	8c3a      	ldrh	r2, [r7, #32]
 8000d3e:	88b9      	ldrh	r1, [r7, #4]
 8000d40:	2300      	movs	r3, #0
 8000d42:	9302      	str	r3, [sp, #8]
 8000d44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	2220      	movs	r2, #32
 8000d52:	f7ff fec1 	bl	8000ad8 <lcd_ShowChar>
				continue;
 8000d56:	e01a      	b.n	8000d8e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	7b7b      	ldrb	r3, [r7, #13]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	fb12 f303 	smulbb	r3, r2, r3
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b298      	uxth	r0, r3
 8000d70:	7b3b      	ldrb	r3, [r7, #12]
 8000d72:	3330      	adds	r3, #48	; 0x30
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	8c3c      	ldrh	r4, [r7, #32]
 8000d78:	88b9      	ldrh	r1, [r7, #4]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	4623      	mov	r3, r4
 8000d8a:	f7ff fea5 	bl	8000ad8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	3301      	adds	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	787b      	ldrb	r3, [r7, #1]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d3a1      	bcc.n	8000ce0 <lcd_ShowIntNum+0x30>
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	cccccccd 	.word	0xcccccccd

08000dac <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <lcd_SetDir+0x44>)
 8000dc8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000dcc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <lcd_SetDir+0x44>)
 8000dd0:	22f0      	movs	r2, #240	; 0xf0
 8000dd2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000dd4:	e006      	b.n	8000de4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <lcd_SetDir+0x44>)
 8000dd8:	22f0      	movs	r2, #240	; 0xf0
 8000dda:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <lcd_SetDir+0x44>)
 8000dde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000de2:	805a      	strh	r2, [r3, #2]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	200000d0 	.word	0x200000d0

08000df4 <lcd_init>:


void lcd_init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfe:	48aa      	ldr	r0, [pc, #680]	; (80010a8 <lcd_init+0x2b4>)
 8000e00:	f001 fc38 	bl	8002674 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e08:	f001 f962 	bl	80020d0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e12:	48a5      	ldr	r0, [pc, #660]	; (80010a8 <lcd_init+0x2b4>)
 8000e14:	f001 fc2e 	bl	8002674 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e1c:	f001 f958 	bl	80020d0 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff ffc3 	bl	8000dac <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000e26:	20d3      	movs	r0, #211	; 0xd3
 8000e28:	f7ff fd8a 	bl	8000940 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000e2c:	f7ff fda8 	bl	8000980 <LCD_RD_DATA>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b9d      	ldr	r3, [pc, #628]	; (80010ac <lcd_init+0x2b8>)
 8000e36:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000e38:	f7ff fda2 	bl	8000980 <LCD_RD_DATA>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b9a      	ldr	r3, [pc, #616]	; (80010ac <lcd_init+0x2b8>)
 8000e42:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000e44:	f7ff fd9c 	bl	8000980 <LCD_RD_DATA>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b97      	ldr	r3, [pc, #604]	; (80010ac <lcd_init+0x2b8>)
 8000e4e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000e50:	4b96      	ldr	r3, [pc, #600]	; (80010ac <lcd_init+0x2b8>)
 8000e52:	889b      	ldrh	r3, [r3, #4]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b94      	ldr	r3, [pc, #592]	; (80010ac <lcd_init+0x2b8>)
 8000e5a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000e5c:	f7ff fd90 	bl	8000980 <LCD_RD_DATA>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b91      	ldr	r3, [pc, #580]	; (80010ac <lcd_init+0x2b8>)
 8000e66:	889b      	ldrh	r3, [r3, #4]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	4b8f      	ldr	r3, [pc, #572]	; (80010ac <lcd_init+0x2b8>)
 8000e6e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000e70:	20cf      	movs	r0, #207	; 0xcf
 8000e72:	f7ff fd65 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff fd72 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000e7c:	20c1      	movs	r0, #193	; 0xc1
 8000e7e:	f7ff fd6f 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000e82:	2030      	movs	r0, #48	; 0x30
 8000e84:	f7ff fd6c 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000e88:	20ed      	movs	r0, #237	; 0xed
 8000e8a:	f7ff fd59 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000e8e:	2064      	movs	r0, #100	; 0x64
 8000e90:	f7ff fd66 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f7ff fd63 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000e9a:	2012      	movs	r0, #18
 8000e9c:	f7ff fd60 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000ea0:	2081      	movs	r0, #129	; 0x81
 8000ea2:	f7ff fd5d 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000ea6:	20e8      	movs	r0, #232	; 0xe8
 8000ea8:	f7ff fd4a 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000eac:	2085      	movs	r0, #133	; 0x85
 8000eae:	f7ff fd57 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000eb2:	2010      	movs	r0, #16
 8000eb4:	f7ff fd54 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000eb8:	207a      	movs	r0, #122	; 0x7a
 8000eba:	f7ff fd51 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000ebe:	20cb      	movs	r0, #203	; 0xcb
 8000ec0:	f7ff fd3e 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000ec4:	2039      	movs	r0, #57	; 0x39
 8000ec6:	f7ff fd4b 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000eca:	202c      	movs	r0, #44	; 0x2c
 8000ecc:	f7ff fd48 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fd45 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000ed6:	2034      	movs	r0, #52	; 0x34
 8000ed8:	f7ff fd42 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000edc:	2002      	movs	r0, #2
 8000ede:	f7ff fd3f 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000ee2:	20f7      	movs	r0, #247	; 0xf7
 8000ee4:	f7ff fd2c 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000ee8:	2020      	movs	r0, #32
 8000eea:	f7ff fd39 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000eee:	20ea      	movs	r0, #234	; 0xea
 8000ef0:	f7ff fd26 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fd33 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff fd30 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000f00:	20c0      	movs	r0, #192	; 0xc0
 8000f02:	f7ff fd1d 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000f06:	201b      	movs	r0, #27
 8000f08:	f7ff fd2a 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000f0c:	20c1      	movs	r0, #193	; 0xc1
 8000f0e:	f7ff fd17 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff fd24 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000f18:	20c5      	movs	r0, #197	; 0xc5
 8000f1a:	f7ff fd11 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000f1e:	2030      	movs	r0, #48	; 0x30
 8000f20:	f7ff fd1e 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000f24:	2030      	movs	r0, #48	; 0x30
 8000f26:	f7ff fd1b 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000f2a:	20c7      	movs	r0, #199	; 0xc7
 8000f2c:	f7ff fd08 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000f30:	20b7      	movs	r0, #183	; 0xb7
 8000f32:	f7ff fd15 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000f36:	2036      	movs	r0, #54	; 0x36
 8000f38:	f7ff fd02 	bl	8000940 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000f3c:	2008      	movs	r0, #8
 8000f3e:	f7ff fd0f 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000f42:	203a      	movs	r0, #58	; 0x3a
 8000f44:	f7ff fcfc 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000f48:	2055      	movs	r0, #85	; 0x55
 8000f4a:	f7ff fd09 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000f4e:	20b1      	movs	r0, #177	; 0xb1
 8000f50:	f7ff fcf6 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fd03 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000f5a:	201a      	movs	r0, #26
 8000f5c:	f7ff fd00 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000f60:	20b6      	movs	r0, #182	; 0xb6
 8000f62:	f7ff fced 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f7ff fcfa 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000f6c:	20a2      	movs	r0, #162	; 0xa2
 8000f6e:	f7ff fcf7 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000f72:	20f2      	movs	r0, #242	; 0xf2
 8000f74:	f7ff fce4 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff fcf1 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000f7e:	2026      	movs	r0, #38	; 0x26
 8000f80:	f7ff fcde 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff fceb 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000f8a:	20e0      	movs	r0, #224	; 0xe0
 8000f8c:	f7ff fcd8 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000f90:	200f      	movs	r0, #15
 8000f92:	f7ff fce5 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000f96:	202a      	movs	r0, #42	; 0x2a
 8000f98:	f7ff fce2 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000f9c:	2028      	movs	r0, #40	; 0x28
 8000f9e:	f7ff fcdf 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000fa2:	2008      	movs	r0, #8
 8000fa4:	f7ff fcdc 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000fa8:	200e      	movs	r0, #14
 8000faa:	f7ff fcd9 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000fae:	2008      	movs	r0, #8
 8000fb0:	f7ff fcd6 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000fb4:	2054      	movs	r0, #84	; 0x54
 8000fb6:	f7ff fcd3 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000fba:	20a9      	movs	r0, #169	; 0xa9
 8000fbc:	f7ff fcd0 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000fc0:	2043      	movs	r0, #67	; 0x43
 8000fc2:	f7ff fccd 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000fc6:	200a      	movs	r0, #10
 8000fc8:	f7ff fcca 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000fcc:	200f      	movs	r0, #15
 8000fce:	f7ff fcc7 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff fcc4 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fcc1 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fcbe 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff fcbb 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000fea:	20e1      	movs	r0, #225	; 0xe1
 8000fec:	f7ff fca8 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff fcb5 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000ff6:	2015      	movs	r0, #21
 8000ff8:	f7ff fcb2 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000ffc:	2017      	movs	r0, #23
 8000ffe:	f7ff fcaf 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001002:	2007      	movs	r0, #7
 8001004:	f7ff fcac 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001008:	2011      	movs	r0, #17
 800100a:	f7ff fca9 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800100e:	2006      	movs	r0, #6
 8001010:	f7ff fca6 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001014:	202b      	movs	r0, #43	; 0x2b
 8001016:	f7ff fca3 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800101a:	2056      	movs	r0, #86	; 0x56
 800101c:	f7ff fca0 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001020:	203c      	movs	r0, #60	; 0x3c
 8001022:	f7ff fc9d 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001026:	2005      	movs	r0, #5
 8001028:	f7ff fc9a 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800102c:	2010      	movs	r0, #16
 800102e:	f7ff fc97 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001032:	200f      	movs	r0, #15
 8001034:	f7ff fc94 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001038:	203f      	movs	r0, #63	; 0x3f
 800103a:	f7ff fc91 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800103e:	203f      	movs	r0, #63	; 0x3f
 8001040:	f7ff fc8e 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001044:	200f      	movs	r0, #15
 8001046:	f7ff fc8b 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800104a:	202b      	movs	r0, #43	; 0x2b
 800104c:	f7ff fc78 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff fc85 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff fc82 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fc7f 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001062:	203f      	movs	r0, #63	; 0x3f
 8001064:	f7ff fc7c 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001068:	202a      	movs	r0, #42	; 0x2a
 800106a:	f7ff fc69 	bl	8000940 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff fc76 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff fc73 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fc70 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001080:	20ef      	movs	r0, #239	; 0xef
 8001082:	f7ff fc6d 	bl	8000960 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001086:	2011      	movs	r0, #17
 8001088:	f7ff fc5a 	bl	8000940 <LCD_WR_REG>
	HAL_Delay(120);
 800108c:	2078      	movs	r0, #120	; 0x78
 800108e:	f001 f81f 	bl	80020d0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001092:	2029      	movs	r0, #41	; 0x29
 8001094:	f7ff fc54 	bl	8000940 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <lcd_init+0x2bc>)
 80010a0:	f001 fae8 	bl	8002674 <HAL_GPIO_WritePin>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40020800 	.word	0x40020800
 80010ac:	200000d0 	.word	0x200000d0
 80010b0:	40020000 	.word	0x40020000

080010b4 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4413      	add	r3, r2
 80010cc:	b298      	uxth	r0, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4413      	add	r3, r2
 80010d8:	b29b      	uxth	r3, r3
 80010da:	8b3a      	ldrh	r2, [r7, #24]
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fce3 	bl	8000aa8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	b298      	uxth	r0, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	8b3a      	ldrh	r2, [r7, #24]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fcd3 	bl	8000aa8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	b29a      	uxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4413      	add	r3, r2
 800110c:	b298      	uxth	r0, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	b29a      	uxth	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b29b      	uxth	r3, r3
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	b29b      	uxth	r3, r3
 800111a:	8b3a      	ldrh	r2, [r7, #24]
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fcc3 	bl	8000aa8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	b29a      	uxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	b29b      	uxth	r3, r3
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	b298      	uxth	r0, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	b29a      	uxth	r2, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	8b3a      	ldrh	r2, [r7, #24]
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fcb3 	bl	8000aa8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	b29a      	uxth	r2, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4413      	add	r3, r2
 800114c:	b298      	uxth	r0, r3
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	b29b      	uxth	r3, r3
 8001156:	4413      	add	r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	8b3a      	ldrh	r2, [r7, #24]
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fca3 	bl	8000aa8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	b29a      	uxth	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b29b      	uxth	r3, r3
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	b298      	uxth	r0, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	8b3a      	ldrh	r2, [r7, #24]
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fc93 	bl	8000aa8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	b29a      	uxth	r2, r3
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	4413      	add	r3, r2
 800118c:	b298      	uxth	r0, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	b29a      	uxth	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	b29b      	uxth	r3, r3
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	8b3a      	ldrh	r2, [r7, #24]
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fc83 	bl	8000aa8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	b298      	uxth	r0, r3
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	8b3a      	ldrh	r2, [r7, #24]
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fc73 	bl	8000aa8 <lcd_DrawPoint>
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b08a      	sub	sp, #40	; 0x28
 80011ce:	af02      	add	r7, sp, #8
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4613      	mov	r3, r2
 80011d8:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	f1c3 0303 	rsb	r3, r3, #3
 80011ea:	613b      	str	r3, [r7, #16]


	if (fill)
 80011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d04f      	beq.n	8001292 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80011f2:	e029      	b.n	8001248 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	e00a      	b.n	8001210 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f7ff ff55 	bl	80010b4 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	429a      	cmp	r2, r3
 8001216:	ddf0      	ble.n	80011fa <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	da06      	bge.n	800122c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	009a      	lsls	r2, r3, #2
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4413      	add	r3, r2
 8001226:	3306      	adds	r3, #6
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	e00a      	b.n	8001242 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	009a      	lsls	r2, r3, #2
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4413      	add	r3, r2
 8001238:	330a      	adds	r3, #10
 800123a:	613b      	str	r3, [r7, #16]
				y--;
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	3b01      	subs	r3, #1
 8001240:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001248:	69fa      	ldr	r2, [r7, #28]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	429a      	cmp	r2, r3
 800124e:	ddd1      	ble.n	80011f4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001250:	e023      	b.n	800129a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff ff29 	bl	80010b4 <_draw_circle_8>
			if (d < 0) {
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	2b00      	cmp	r3, #0
 8001266:	da06      	bge.n	8001276 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	009a      	lsls	r2, r3, #2
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4413      	add	r3, r2
 8001270:	3306      	adds	r3, #6
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	e00a      	b.n	800128c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	009a      	lsls	r2, r3, #2
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4413      	add	r3, r2
 8001282:	330a      	adds	r3, #10
 8001284:	613b      	str	r3, [r7, #16]
				y--;
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	3b01      	subs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
			x++;
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	3301      	adds	r3, #1
 8001290:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	429a      	cmp	r2, r3
 8001298:	dddb      	ble.n	8001252 <lcd_DrawCircle+0x88>
}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2140      	movs	r1, #64	; 0x40
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <led7_init+0x14>)
 80012ae:	f001 f9e1 	bl	8002674 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021800 	.word	0x40021800

080012bc <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80012c0:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <led7_Scan+0x104>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <led7_Scan+0x104>)
 80012ca:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80012cc:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <led7_Scan+0x108>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <led7_Scan+0x10c>)
 80012d4:	5c9b      	ldrb	r3, [r3, r2]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21a      	sxth	r2, r3
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <led7_Scan+0x104>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <led7_Scan+0x104>)
 80012e8:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <led7_Scan+0x108>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d846      	bhi.n	8001380 <led7_Scan+0xc4>
 80012f2:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <led7_Scan+0x3c>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	08001309 	.word	0x08001309
 80012fc:	08001327 	.word	0x08001327
 8001300:	08001345 	.word	0x08001345
 8001304:	08001363 	.word	0x08001363
	case 0:
		spi_buffer |= 0x00b0;
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <led7_Scan+0x104>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001310:	b29a      	uxth	r2, r3
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <led7_Scan+0x104>)
 8001314:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <led7_Scan+0x104>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <led7_Scan+0x104>)
 8001322:	801a      	strh	r2, [r3, #0]
		break;
 8001324:	e02d      	b.n	8001382 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <led7_Scan+0x104>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <led7_Scan+0x104>)
 8001332:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <led7_Scan+0x104>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	f023 0320 	bic.w	r3, r3, #32
 800133c:	b29a      	uxth	r2, r3
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <led7_Scan+0x104>)
 8001340:	801a      	strh	r2, [r3, #0]
		break;
 8001342:	e01e      	b.n	8001382 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <led7_Scan+0x104>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800134c:	b29a      	uxth	r2, r3
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <led7_Scan+0x104>)
 8001350:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <led7_Scan+0x104>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	f023 0310 	bic.w	r3, r3, #16
 800135a:	b29a      	uxth	r2, r3
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <led7_Scan+0x104>)
 800135e:	801a      	strh	r2, [r3, #0]
		break;
 8001360:	e00f      	b.n	8001382 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <led7_Scan+0x104>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <led7_Scan+0x104>)
 800136e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <led7_Scan+0x104>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <led7_Scan+0x104>)
 800137c:	801a      	strh	r2, [r3, #0]
		break;
 800137e:	e000      	b.n	8001382 <led7_Scan+0xc6>
	default:
		break;
 8001380:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <led7_Scan+0x108>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	425a      	negs	r2, r3
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	bf58      	it	pl
 8001394:	4253      	negpl	r3, r2
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <led7_Scan+0x108>)
 800139a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2140      	movs	r1, #64	; 0x40
 80013a0:	480a      	ldr	r0, [pc, #40]	; (80013cc <led7_Scan+0x110>)
 80013a2:	f001 f967 	bl	8002674 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80013a6:	2301      	movs	r3, #1
 80013a8:	2202      	movs	r2, #2
 80013aa:	4905      	ldr	r1, [pc, #20]	; (80013c0 <led7_Scan+0x104>)
 80013ac:	4808      	ldr	r0, [pc, #32]	; (80013d0 <led7_Scan+0x114>)
 80013ae:	f001 fe44 	bl	800303a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2140      	movs	r1, #64	; 0x40
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <led7_Scan+0x110>)
 80013b8:	f001 f95c 	bl	8002674 <HAL_GPIO_WritePin>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000004 	.word	0x20000004
 80013c4:	20000044 	.word	0x20000044
 80013c8:	20000000 	.word	0x20000000
 80013cc:	40021800 	.word	0x40021800
 80013d0:	2000011c 	.word	0x2000011c

080013d4 <main>:
int yellow_time = 2;
int temp_red, temp_green, temp_yellow;
int on = 0;
int showTime;
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	showTime = red_time;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <main+0x4c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a11      	ldr	r2, [pc, #68]	; (8001424 <main+0x50>)
 80013de:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e0:	f000 fe04 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e4:	f000 f822 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e8:	f7ff f9b2 	bl	8000750 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013ec:	f000 fd62 	bl	8001eb4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80013f0:	f000 fc74 	bl	8001cdc <MX_SPI1_Init>
  MX_FSMC_Init();
 80013f4:	f7ff f8dc 	bl	80005b0 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80013f8:	f000 f882 	bl	8001500 <system_init>
//  lcd_Clear(WHITE);
//  test_lcd();
  /* USER CODE END 2 */


  test_lcd();
 80013fc:	f000 fba0 	bl	8001b40 <test_lcd>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  while(!flag_timer2);
	  flag_timer2 = 0;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <main+0x54>)
 8001402:	2200      	movs	r2, #0
 8001404:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001406:	f7ff f867 	bl	80004d8 <button_Scan>
	  test_button();
 800140a:	f000 faf1 	bl	80019f0 <test_button>

	  displayCountDown(showTime);
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <main+0x50>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f898 	bl	8001548 <displayCountDown>
	  displayTrafficLight();
 8001418:	f000 f8be 	bl	8001598 <displayTrafficLight>
  {
 800141c:	e7f0      	b.n	8001400 <main+0x2c>
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008
 8001424:	20000110 	.word	0x20000110
 8001428:	2000005a 	.word	0x2000005a

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b094      	sub	sp, #80	; 0x50
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	2230      	movs	r2, #48	; 0x30
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f003 f8d6 	bl	80045ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <SystemClock_Config+0xcc>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <SystemClock_Config+0xcc>)
 800145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <SystemClock_Config+0xcc>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <SystemClock_Config+0xd0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <SystemClock_Config+0xd0>)
 8001476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <SystemClock_Config+0xd0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001488:	2302      	movs	r3, #2
 800148a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148c:	2301      	movs	r3, #1
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001490:	2310      	movs	r3, #16
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001494:	2302      	movs	r3, #2
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001498:	2300      	movs	r3, #0
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800149c:	2308      	movs	r3, #8
 800149e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014a0:	23a8      	movs	r3, #168	; 0xa8
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014a8:	2304      	movs	r3, #4
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 f8f9 	bl	80026a8 <HAL_RCC_OscConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014bc:	f000 fb80 	bl	8001bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c0:	230f      	movs	r3, #15
 80014c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c4:	2302      	movs	r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2105      	movs	r1, #5
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fb5a 	bl	8002b98 <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ea:	f000 fb69 	bl	8001bc0 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	3750      	adds	r7, #80	; 0x50
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000

08001500 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2120      	movs	r1, #32
 8001508:	480e      	ldr	r0, [pc, #56]	; (8001544 <system_init+0x44>)
 800150a:	f001 f8b3 	bl	8002674 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2140      	movs	r1, #64	; 0x40
 8001512:	480c      	ldr	r0, [pc, #48]	; (8001544 <system_init+0x44>)
 8001514:	f001 f8ae 	bl	8002674 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2110      	movs	r1, #16
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <system_init+0x44>)
 800151e:	f001 f8a9 	bl	8002674 <HAL_GPIO_WritePin>
	  timer_init();
 8001522:	f000 fb53 	bl	8001bcc <timer_init>
	  led7_init();
 8001526:	f7ff febd 	bl	80012a4 <led7_init>
	  button_init();
 800152a:	f7fe ffc9 	bl	80004c0 <button_init>
	  lcd_init();
 800152e:	f7ff fc61 	bl	8000df4 <lcd_init>

	  setTimer1(1000);
 8001532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001536:	f000 fb53 	bl	8001be0 <setTimer1>
	  setTimer2(50);
 800153a:	2032      	movs	r0, #50	; 0x32
 800153c:	f000 fb6c 	bl	8001c18 <setTimer2>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000

08001548 <displayCountDown>:
	led7_SetDigit(0, 0, 0);
	led7_SetDigit(5, 1, 0);
	led7_SetDigit(4, 2, 0);
	led7_SetDigit(7, 3, 0);
}
void displayCountDown(int number) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af04      	add	r7, sp, #16
 800154e:	6078      	str	r0, [r7, #4]
	lcd_ShowIntNum(120, 100, number, 2, WHITE, BLACK, 32);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	b29a      	uxth	r2, r3
 8001554:	2320      	movs	r3, #32
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	2300      	movs	r3, #0
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2302      	movs	r3, #2
 8001564:	2164      	movs	r1, #100	; 0x64
 8001566:	2078      	movs	r0, #120	; 0x78
 8001568:	f7ff fba2 	bl	8000cb0 <lcd_ShowIntNum>
	lcd_ShowIntNum(120, 60, state, 1, WHITE, BLACK, 32);
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <displayCountDown+0x4c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b29a      	uxth	r2, r3
 8001572:	2320      	movs	r3, #32
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	2300      	movs	r3, #0
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	213c      	movs	r1, #60	; 0x3c
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f7ff fb93 	bl	8000cb0 <lcd_ShowIntNum>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000048 	.word	0x20000048

08001598 <displayTrafficLight>:
void displayTrafficLight() {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af02      	add	r7, sp, #8
	switch(state){
 800159e:	4bc4      	ldr	r3, [pc, #784]	; (80018b0 <displayTrafficLight+0x318>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	f200 81f9 	bhi.w	800199a <displayTrafficLight+0x402>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <displayTrafficLight+0x18>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	080017f3 	.word	0x080017f3
 80015b8:	0800186f 	.word	0x0800186f
 80015bc:	08001913 	.word	0x08001913
		case 0:
		  if (flag_timer1 == 1) {
 80015c0:	4bbc      	ldr	r3, [pc, #752]	; (80018b4 <displayTrafficLight+0x31c>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10b      	bne.n	80015e0 <displayTrafficLight+0x48>
			  showTime -= 1;
 80015c8:	4bbb      	ldr	r3, [pc, #748]	; (80018b8 <displayTrafficLight+0x320>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4aba      	ldr	r2, [pc, #744]	; (80018b8 <displayTrafficLight+0x320>)
 80015d0:	6013      	str	r3, [r2, #0]
			  flag_timer1 = 0;
 80015d2:	4bb8      	ldr	r3, [pc, #736]	; (80018b4 <displayTrafficLight+0x31c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]
			  setTimer1(1000);
 80015d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015dc:	f000 fb00 	bl	8001be0 <setTimer1>

		  }
		  // 0: red green, 1: red yellow, 2: green red, 3: yellow red
		  if (normalState == 0) {
 80015e0:	4bb6      	ldr	r3, [pc, #728]	; (80018bc <displayTrafficLight+0x324>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d13a      	bne.n	800165e <displayTrafficLight+0xc6>
			  	lcd_DrawCircle(60, 40, RED, 20, 1);
 80015e8:	2301      	movs	r3, #1
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2314      	movs	r3, #20
 80015ee:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80015f2:	2128      	movs	r1, #40	; 0x28
 80015f4:	203c      	movs	r0, #60	; 0x3c
 80015f6:	f7ff fde8 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(60, 100, BLACK, 20, 1);
 80015fa:	2301      	movs	r3, #1
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2314      	movs	r3, #20
 8001600:	2200      	movs	r2, #0
 8001602:	2164      	movs	r1, #100	; 0x64
 8001604:	203c      	movs	r0, #60	; 0x3c
 8001606:	f7ff fde0 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(60, 160, BLACK, 20, 1);
 800160a:	2301      	movs	r3, #1
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2314      	movs	r3, #20
 8001610:	2200      	movs	r2, #0
 8001612:	21a0      	movs	r1, #160	; 0xa0
 8001614:	203c      	movs	r0, #60	; 0x3c
 8001616:	f7ff fdd8 	bl	80011ca <lcd_DrawCircle>

				lcd_DrawCircle(60, 240, BLACK, 20, 1);
 800161a:	2301      	movs	r3, #1
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2314      	movs	r3, #20
 8001620:	2200      	movs	r2, #0
 8001622:	21f0      	movs	r1, #240	; 0xf0
 8001624:	203c      	movs	r0, #60	; 0x3c
 8001626:	f7ff fdd0 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(120, 240, BLACK, 20, 1);
 800162a:	2301      	movs	r3, #1
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2314      	movs	r3, #20
 8001630:	2200      	movs	r2, #0
 8001632:	21f0      	movs	r1, #240	; 0xf0
 8001634:	2078      	movs	r0, #120	; 0x78
 8001636:	f7ff fdc8 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(180, 240, GREEN, 20, 1);
 800163a:	2301      	movs	r3, #1
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2314      	movs	r3, #20
 8001640:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001644:	21f0      	movs	r1, #240	; 0xf0
 8001646:	20b4      	movs	r0, #180	; 0xb4
 8001648:	f7ff fdbf 	bl	80011ca <lcd_DrawCircle>
				if (showTime == 2) normalState = 1;
 800164c:	4b9a      	ldr	r3, [pc, #616]	; (80018b8 <displayTrafficLight+0x320>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b02      	cmp	r3, #2
 8001652:	f040 819b 	bne.w	800198c <displayTrafficLight+0x3f4>
 8001656:	4b99      	ldr	r3, [pc, #612]	; (80018bc <displayTrafficLight+0x324>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
				if (showTime == 0){
					normalState = 0;
					showTime = red_time;
				}
		  }
		  break;
 800165c:	e196      	b.n	800198c <displayTrafficLight+0x3f4>
		  }else if(normalState == 1){
 800165e:	4b97      	ldr	r3, [pc, #604]	; (80018bc <displayTrafficLight+0x324>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d13e      	bne.n	80016e4 <displayTrafficLight+0x14c>
			  	lcd_DrawCircle(60, 40, RED, 20, 1);
 8001666:	2301      	movs	r3, #1
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2314      	movs	r3, #20
 800166c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001670:	2128      	movs	r1, #40	; 0x28
 8001672:	203c      	movs	r0, #60	; 0x3c
 8001674:	f7ff fda9 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(60, 100, BLACK, 20, 1);
 8001678:	2301      	movs	r3, #1
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2314      	movs	r3, #20
 800167e:	2200      	movs	r2, #0
 8001680:	2164      	movs	r1, #100	; 0x64
 8001682:	203c      	movs	r0, #60	; 0x3c
 8001684:	f7ff fda1 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(60, 160, BLACK, 20, 1);
 8001688:	2301      	movs	r3, #1
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2314      	movs	r3, #20
 800168e:	2200      	movs	r2, #0
 8001690:	21a0      	movs	r1, #160	; 0xa0
 8001692:	203c      	movs	r0, #60	; 0x3c
 8001694:	f7ff fd99 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(60, 240, BLACK, 20, 1);
 8001698:	2301      	movs	r3, #1
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2314      	movs	r3, #20
 800169e:	2200      	movs	r2, #0
 80016a0:	21f0      	movs	r1, #240	; 0xf0
 80016a2:	203c      	movs	r0, #60	; 0x3c
 80016a4:	f7ff fd91 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(120, 240, YELLOW, 20, 1);
 80016a8:	2301      	movs	r3, #1
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2314      	movs	r3, #20
 80016ae:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80016b2:	21f0      	movs	r1, #240	; 0xf0
 80016b4:	2078      	movs	r0, #120	; 0x78
 80016b6:	f7ff fd88 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(180, 240, BLACK, 20, 1);
 80016ba:	2301      	movs	r3, #1
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2314      	movs	r3, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	21f0      	movs	r1, #240	; 0xf0
 80016c4:	20b4      	movs	r0, #180	; 0xb4
 80016c6:	f7ff fd80 	bl	80011ca <lcd_DrawCircle>
				if (showTime == 0){
 80016ca:	4b7b      	ldr	r3, [pc, #492]	; (80018b8 <displayTrafficLight+0x320>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 815c 	bne.w	800198c <displayTrafficLight+0x3f4>
					normalState = 2;
 80016d4:	4b79      	ldr	r3, [pc, #484]	; (80018bc <displayTrafficLight+0x324>)
 80016d6:	2202      	movs	r2, #2
 80016d8:	601a      	str	r2, [r3, #0]
					showTime = green_time;
 80016da:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <displayTrafficLight+0x328>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a76      	ldr	r2, [pc, #472]	; (80018b8 <displayTrafficLight+0x320>)
 80016e0:	6013      	str	r3, [r2, #0]
		  break;
 80016e2:	e153      	b.n	800198c <displayTrafficLight+0x3f4>
		  }else if(normalState == 2){
 80016e4:	4b75      	ldr	r3, [pc, #468]	; (80018bc <displayTrafficLight+0x324>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d13e      	bne.n	800176a <displayTrafficLight+0x1d2>
			    lcd_DrawCircle(60, 40, BLACK, 20, 1);
 80016ec:	2301      	movs	r3, #1
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2314      	movs	r3, #20
 80016f2:	2200      	movs	r2, #0
 80016f4:	2128      	movs	r1, #40	; 0x28
 80016f6:	203c      	movs	r0, #60	; 0x3c
 80016f8:	f7ff fd67 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(60, 100, BLACK, 20, 1);
 80016fc:	2301      	movs	r3, #1
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2314      	movs	r3, #20
 8001702:	2200      	movs	r2, #0
 8001704:	2164      	movs	r1, #100	; 0x64
 8001706:	203c      	movs	r0, #60	; 0x3c
 8001708:	f7ff fd5f 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(60, 160, GREEN, 20, 1);
 800170c:	2301      	movs	r3, #1
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2314      	movs	r3, #20
 8001712:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001716:	21a0      	movs	r1, #160	; 0xa0
 8001718:	203c      	movs	r0, #60	; 0x3c
 800171a:	f7ff fd56 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(60, 240, RED, 20, 1);
 800171e:	2301      	movs	r3, #1
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2314      	movs	r3, #20
 8001724:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001728:	21f0      	movs	r1, #240	; 0xf0
 800172a:	203c      	movs	r0, #60	; 0x3c
 800172c:	f7ff fd4d 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(120, 240, BLACK, 20, 1);
 8001730:	2301      	movs	r3, #1
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2314      	movs	r3, #20
 8001736:	2200      	movs	r2, #0
 8001738:	21f0      	movs	r1, #240	; 0xf0
 800173a:	2078      	movs	r0, #120	; 0x78
 800173c:	f7ff fd45 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(180, 240, BLACK, 20, 1);
 8001740:	2301      	movs	r3, #1
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2314      	movs	r3, #20
 8001746:	2200      	movs	r2, #0
 8001748:	21f0      	movs	r1, #240	; 0xf0
 800174a:	20b4      	movs	r0, #180	; 0xb4
 800174c:	f7ff fd3d 	bl	80011ca <lcd_DrawCircle>
				if (showTime == 0){
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <displayTrafficLight+0x320>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 8119 	bne.w	800198c <displayTrafficLight+0x3f4>
					normalState = 3;
 800175a:	4b58      	ldr	r3, [pc, #352]	; (80018bc <displayTrafficLight+0x324>)
 800175c:	2203      	movs	r2, #3
 800175e:	601a      	str	r2, [r3, #0]
					showTime = yellow_time;
 8001760:	4b58      	ldr	r3, [pc, #352]	; (80018c4 <displayTrafficLight+0x32c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a54      	ldr	r2, [pc, #336]	; (80018b8 <displayTrafficLight+0x320>)
 8001766:	6013      	str	r3, [r2, #0]
		  break;
 8001768:	e110      	b.n	800198c <displayTrafficLight+0x3f4>
		  }else if(normalState == 3){
 800176a:	4b54      	ldr	r3, [pc, #336]	; (80018bc <displayTrafficLight+0x324>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b03      	cmp	r3, #3
 8001770:	f040 810c 	bne.w	800198c <displayTrafficLight+0x3f4>
			    lcd_DrawCircle(60, 40, BLACK, 20, 1);
 8001774:	2301      	movs	r3, #1
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2314      	movs	r3, #20
 800177a:	2200      	movs	r2, #0
 800177c:	2128      	movs	r1, #40	; 0x28
 800177e:	203c      	movs	r0, #60	; 0x3c
 8001780:	f7ff fd23 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(60, 100, YELLOW, 20, 1);
 8001784:	2301      	movs	r3, #1
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2314      	movs	r3, #20
 800178a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800178e:	2164      	movs	r1, #100	; 0x64
 8001790:	203c      	movs	r0, #60	; 0x3c
 8001792:	f7ff fd1a 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(60, 160, BLACK, 20, 1);
 8001796:	2301      	movs	r3, #1
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2314      	movs	r3, #20
 800179c:	2200      	movs	r2, #0
 800179e:	21a0      	movs	r1, #160	; 0xa0
 80017a0:	203c      	movs	r0, #60	; 0x3c
 80017a2:	f7ff fd12 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(60, 240, RED, 20, 1);
 80017a6:	2301      	movs	r3, #1
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2314      	movs	r3, #20
 80017ac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80017b0:	21f0      	movs	r1, #240	; 0xf0
 80017b2:	203c      	movs	r0, #60	; 0x3c
 80017b4:	f7ff fd09 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(120, 240, BLACK, 20, 1);
 80017b8:	2301      	movs	r3, #1
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2314      	movs	r3, #20
 80017be:	2200      	movs	r2, #0
 80017c0:	21f0      	movs	r1, #240	; 0xf0
 80017c2:	2078      	movs	r0, #120	; 0x78
 80017c4:	f7ff fd01 	bl	80011ca <lcd_DrawCircle>
				lcd_DrawCircle(180, 240, BLACK, 20, 1);
 80017c8:	2301      	movs	r3, #1
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2314      	movs	r3, #20
 80017ce:	2200      	movs	r2, #0
 80017d0:	21f0      	movs	r1, #240	; 0xf0
 80017d2:	20b4      	movs	r0, #180	; 0xb4
 80017d4:	f7ff fcf9 	bl	80011ca <lcd_DrawCircle>
				if (showTime == 0){
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <displayTrafficLight+0x320>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f040 80d5 	bne.w	800198c <displayTrafficLight+0x3f4>
					normalState = 0;
 80017e2:	4b36      	ldr	r3, [pc, #216]	; (80018bc <displayTrafficLight+0x324>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
					showTime = red_time;
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <displayTrafficLight+0x330>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a32      	ldr	r2, [pc, #200]	; (80018b8 <displayTrafficLight+0x320>)
 80017ee:	6013      	str	r3, [r2, #0]
		  break;
 80017f0:	e0cc      	b.n	800198c <displayTrafficLight+0x3f4>
		case 1:
			showTime = temp_red;
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <displayTrafficLight+0x334>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <displayTrafficLight+0x320>)
 80017f8:	6013      	str	r3, [r2, #0]

			if (flag_timer1 == 1) {
 80017fa:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <displayTrafficLight+0x31c>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	f040 80c6 	bne.w	8001990 <displayTrafficLight+0x3f8>
				if(on == 1){
 8001804:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <displayTrafficLight+0x338>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d113      	bne.n	8001834 <displayTrafficLight+0x29c>
					lcd_DrawCircle(60, 40, BLACK, 20, 1);
 800180c:	2301      	movs	r3, #1
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2314      	movs	r3, #20
 8001812:	2200      	movs	r2, #0
 8001814:	2128      	movs	r1, #40	; 0x28
 8001816:	203c      	movs	r0, #60	; 0x3c
 8001818:	f7ff fcd7 	bl	80011ca <lcd_DrawCircle>
					lcd_DrawCircle(60, 240, BLACK, 20, 1);
 800181c:	2301      	movs	r3, #1
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2314      	movs	r3, #20
 8001822:	2200      	movs	r2, #0
 8001824:	21f0      	movs	r1, #240	; 0xf0
 8001826:	203c      	movs	r0, #60	; 0x3c
 8001828:	f7ff fccf 	bl	80011ca <lcd_DrawCircle>
					on = 0;
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <displayTrafficLight+0x338>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e014      	b.n	800185e <displayTrafficLight+0x2c6>
				}else{
					lcd_DrawCircle(60, 240, RED, 20, 1);
 8001834:	2301      	movs	r3, #1
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2314      	movs	r3, #20
 800183a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800183e:	21f0      	movs	r1, #240	; 0xf0
 8001840:	203c      	movs	r0, #60	; 0x3c
 8001842:	f7ff fcc2 	bl	80011ca <lcd_DrawCircle>
					lcd_DrawCircle(60, 40, RED, 20, 1);
 8001846:	2301      	movs	r3, #1
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2314      	movs	r3, #20
 800184c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001850:	2128      	movs	r1, #40	; 0x28
 8001852:	203c      	movs	r0, #60	; 0x3c
 8001854:	f7ff fcb9 	bl	80011ca <lcd_DrawCircle>
					on = 1;
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <displayTrafficLight+0x338>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
				}
				flag_timer1 = 0;
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <displayTrafficLight+0x31c>)
 8001860:	2200      	movs	r2, #0
 8001862:	801a      	strh	r2, [r3, #0]
				setTimer1(500);
 8001864:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001868:	f000 f9ba 	bl	8001be0 <setTimer1>
			}
			break;
 800186c:	e090      	b.n	8001990 <displayTrafficLight+0x3f8>
		case 2:
			showTime = temp_yellow;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <displayTrafficLight+0x33c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <displayTrafficLight+0x320>)
 8001874:	6013      	str	r3, [r2, #0]

			if (flag_timer1 == 1) {
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <displayTrafficLight+0x31c>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	f040 808a 	bne.w	8001994 <displayTrafficLight+0x3fc>
				if(on == 1){
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <displayTrafficLight+0x338>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d127      	bne.n	80018d8 <displayTrafficLight+0x340>
					lcd_DrawCircle(120, 240, BLACK, 20, 1);
 8001888:	2301      	movs	r3, #1
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2314      	movs	r3, #20
 800188e:	2200      	movs	r2, #0
 8001890:	21f0      	movs	r1, #240	; 0xf0
 8001892:	2078      	movs	r0, #120	; 0x78
 8001894:	f7ff fc99 	bl	80011ca <lcd_DrawCircle>
					lcd_DrawCircle(60, 100, BLACK, 20, 1);
 8001898:	2301      	movs	r3, #1
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2314      	movs	r3, #20
 800189e:	2200      	movs	r2, #0
 80018a0:	2164      	movs	r1, #100	; 0x64
 80018a2:	203c      	movs	r0, #60	; 0x3c
 80018a4:	f7ff fc91 	bl	80011ca <lcd_DrawCircle>
					on = 0;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <displayTrafficLight+0x338>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e028      	b.n	8001902 <displayTrafficLight+0x36a>
 80018b0:	20000048 	.word	0x20000048
 80018b4:	20000054 	.word	0x20000054
 80018b8:	20000110 	.word	0x20000110
 80018bc:	2000004c 	.word	0x2000004c
 80018c0:	2000000c 	.word	0x2000000c
 80018c4:	20000010 	.word	0x20000010
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000114 	.word	0x20000114
 80018d0:	20000050 	.word	0x20000050
 80018d4:	2000010c 	.word	0x2000010c
				}else{
					lcd_DrawCircle(120, 240, YELLOW, 20, 1);
 80018d8:	2301      	movs	r3, #1
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2314      	movs	r3, #20
 80018de:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80018e2:	21f0      	movs	r1, #240	; 0xf0
 80018e4:	2078      	movs	r0, #120	; 0x78
 80018e6:	f7ff fc70 	bl	80011ca <lcd_DrawCircle>
					lcd_DrawCircle(60, 100, YELLOW, 20, 1);
 80018ea:	2301      	movs	r3, #1
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2314      	movs	r3, #20
 80018f0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80018f4:	2164      	movs	r1, #100	; 0x64
 80018f6:	203c      	movs	r0, #60	; 0x3c
 80018f8:	f7ff fc67 	bl	80011ca <lcd_DrawCircle>
					on = 1;
 80018fc:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <displayTrafficLight+0x408>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
				}
				flag_timer1 = 0;
 8001902:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <displayTrafficLight+0x40c>)
 8001904:	2200      	movs	r2, #0
 8001906:	801a      	strh	r2, [r3, #0]
				setTimer1(500);
 8001908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800190c:	f000 f968 	bl	8001be0 <setTimer1>
			}
			break;
 8001910:	e040      	b.n	8001994 <displayTrafficLight+0x3fc>
		case 3:
			showTime = temp_green;
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <displayTrafficLight+0x410>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <displayTrafficLight+0x414>)
 8001918:	6013      	str	r3, [r2, #0]

			if (flag_timer1 == 1) {
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <displayTrafficLight+0x40c>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d13a      	bne.n	8001998 <displayTrafficLight+0x400>
				if(on == 1){
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <displayTrafficLight+0x408>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d113      	bne.n	8001952 <displayTrafficLight+0x3ba>
					lcd_DrawCircle(60, 160, BLACK, 20, 1);
 800192a:	2301      	movs	r3, #1
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2314      	movs	r3, #20
 8001930:	2200      	movs	r2, #0
 8001932:	21a0      	movs	r1, #160	; 0xa0
 8001934:	203c      	movs	r0, #60	; 0x3c
 8001936:	f7ff fc48 	bl	80011ca <lcd_DrawCircle>
					lcd_DrawCircle(180, 240, BLACK, 20, 1);
 800193a:	2301      	movs	r3, #1
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2314      	movs	r3, #20
 8001940:	2200      	movs	r2, #0
 8001942:	21f0      	movs	r1, #240	; 0xf0
 8001944:	20b4      	movs	r0, #180	; 0xb4
 8001946:	f7ff fc40 	bl	80011ca <lcd_DrawCircle>
					on = 0;
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <displayTrafficLight+0x408>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	e014      	b.n	800197c <displayTrafficLight+0x3e4>
				}else{
					lcd_DrawCircle(60, 160, GREEN, 20, 1);
 8001952:	2301      	movs	r3, #1
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2314      	movs	r3, #20
 8001958:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800195c:	21a0      	movs	r1, #160	; 0xa0
 800195e:	203c      	movs	r0, #60	; 0x3c
 8001960:	f7ff fc33 	bl	80011ca <lcd_DrawCircle>
					lcd_DrawCircle(180, 240, GREEN, 20, 1);
 8001964:	2301      	movs	r3, #1
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2314      	movs	r3, #20
 800196a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800196e:	21f0      	movs	r1, #240	; 0xf0
 8001970:	20b4      	movs	r0, #180	; 0xb4
 8001972:	f7ff fc2a 	bl	80011ca <lcd_DrawCircle>
					on = 1;
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <displayTrafficLight+0x408>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
				}
				flag_timer1 = 0;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <displayTrafficLight+0x40c>)
 800197e:	2200      	movs	r2, #0
 8001980:	801a      	strh	r2, [r3, #0]
				setTimer1(500);
 8001982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001986:	f000 f92b 	bl	8001be0 <setTimer1>
			}
			break;
 800198a:	e005      	b.n	8001998 <displayTrafficLight+0x400>
		  break;
 800198c:	bf00      	nop
 800198e:	e004      	b.n	800199a <displayTrafficLight+0x402>
			break;
 8001990:	bf00      	nop
 8001992:	e002      	b.n	800199a <displayTrafficLight+0x402>
			break;
 8001994:	bf00      	nop
 8001996:	e000      	b.n	800199a <displayTrafficLight+0x402>
			break;
 8001998:	bf00      	nop
	 };
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000050 	.word	0x20000050
 80019a4:	20000054 	.word	0x20000054
 80019a8:	20000118 	.word	0x20000118
 80019ac:	20000110 	.word	0x20000110

080019b0 <reset_temp>:

void reset_temp(){
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
	temp_red = red_time;
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <reset_temp+0x28>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a08      	ldr	r2, [pc, #32]	; (80019dc <reset_temp+0x2c>)
 80019ba:	6013      	str	r3, [r2, #0]
	temp_green = green_time;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <reset_temp+0x30>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <reset_temp+0x34>)
 80019c2:	6013      	str	r3, [r2, #0]
	temp_yellow = yellow_time;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <reset_temp+0x38>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a08      	ldr	r2, [pc, #32]	; (80019ec <reset_temp+0x3c>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000114 	.word	0x20000114
 80019e0:	2000000c 	.word	0x2000000c
 80019e4:	20000118 	.word	0x20000118
 80019e8:	20000010 	.word	0x20000010
 80019ec:	2000010c 	.word	0x2000010c

080019f0 <test_button>:


void test_button(){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++){
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	e084      	b.n	8001b06 <test_button+0x116>
		if(button_count[i] == 1){
 80019fc:	4a46      	ldr	r2, [pc, #280]	; (8001b18 <test_button+0x128>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d17b      	bne.n	8001b00 <test_button+0x110>
			if (i == 0){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d110      	bne.n	8001a30 <test_button+0x40>
				state++;
 8001a0e:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <test_button+0x12c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	4a41      	ldr	r2, [pc, #260]	; (8001b1c <test_button+0x12c>)
 8001a16:	6013      	str	r3, [r2, #0]
				if( state > 3) state = 0;
 8001a18:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <test_button+0x12c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	dd02      	ble.n	8001a26 <test_button+0x36>
 8001a20:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <test_button+0x12c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
				reset_temp();
 8001a26:	f7ff ffc3 	bl	80019b0 <reset_temp>
				test_lcd();
 8001a2a:	f000 f889 	bl	8001b40 <test_lcd>
 8001a2e:	e067      	b.n	8001b00 <test_button+0x110>
			}
			else if (i == 1){
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d141      	bne.n	8001aba <test_button+0xca>
				switch(state){
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <test_button+0x12c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d860      	bhi.n	8001b00 <test_button+0x110>
 8001a3e:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <test_button+0x54>)
 8001a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a44:	08001b01 	.word	0x08001b01
 8001a48:	08001a55 	.word	0x08001a55
 8001a4c:	08001a77 	.word	0x08001a77
 8001a50:	08001a99 	.word	0x08001a99
					case 0:
						break;
					case 1:
						temp_red++;
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <test_button+0x130>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	4a31      	ldr	r2, [pc, #196]	; (8001b20 <test_button+0x130>)
 8001a5c:	6013      	str	r3, [r2, #0]
						temp_green++;
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <test_button+0x134>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a2f      	ldr	r2, [pc, #188]	; (8001b24 <test_button+0x134>)
 8001a66:	6013      	str	r3, [r2, #0]
						if(temp_red > 99)
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <test_button+0x130>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b63      	cmp	r3, #99	; 0x63
 8001a6e:	dd42      	ble.n	8001af6 <test_button+0x106>
							reset_temp();
 8001a70:	f7ff ff9e 	bl	80019b0 <reset_temp>
						break;
 8001a74:	e03f      	b.n	8001af6 <test_button+0x106>
					case 2:
						temp_red++;
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <test_button+0x130>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	4a28      	ldr	r2, [pc, #160]	; (8001b20 <test_button+0x130>)
 8001a7e:	6013      	str	r3, [r2, #0]
						temp_yellow++;
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <test_button+0x138>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	4a28      	ldr	r2, [pc, #160]	; (8001b28 <test_button+0x138>)
 8001a88:	6013      	str	r3, [r2, #0]
						if(temp_red > 99)
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <test_button+0x130>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b63      	cmp	r3, #99	; 0x63
 8001a90:	dd33      	ble.n	8001afa <test_button+0x10a>
							reset_temp();
 8001a92:	f7ff ff8d 	bl	80019b0 <reset_temp>
						break;
 8001a96:	e030      	b.n	8001afa <test_button+0x10a>
					case 3:
						temp_red++;
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <test_button+0x130>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	4a20      	ldr	r2, [pc, #128]	; (8001b20 <test_button+0x130>)
 8001aa0:	6013      	str	r3, [r2, #0]
						temp_green++;
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <test_button+0x134>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <test_button+0x134>)
 8001aaa:	6013      	str	r3, [r2, #0]
						if(temp_red > 99)
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <test_button+0x130>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b63      	cmp	r3, #99	; 0x63
 8001ab2:	dd24      	ble.n	8001afe <test_button+0x10e>
							reset_temp();
 8001ab4:	f7ff ff7c 	bl	80019b0 <reset_temp>
						break;
 8001ab8:	e021      	b.n	8001afe <test_button+0x10e>
				};
			}
			else if (i == 2 && state != 0){
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d11f      	bne.n	8001b00 <test_button+0x110>
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <test_button+0x12c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01b      	beq.n	8001b00 <test_button+0x110>
				state = 0;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <test_button+0x12c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
				normalState = 0;
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <test_button+0x13c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

				red_time = temp_red;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <test_button+0x130>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <test_button+0x140>)
 8001ada:	6013      	str	r3, [r2, #0]
				green_time = temp_green;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <test_button+0x134>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <test_button+0x144>)
 8001ae2:	6013      	str	r3, [r2, #0]
				yellow_time = temp_yellow;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <test_button+0x138>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <test_button+0x148>)
 8001aea:	6013      	str	r3, [r2, #0]
				showTime = red_time;
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <test_button+0x140>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <test_button+0x14c>)
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e004      	b.n	8001b00 <test_button+0x110>
						break;
 8001af6:	bf00      	nop
 8001af8:	e002      	b.n	8001b00 <test_button+0x110>
						break;
 8001afa:	bf00      	nop
 8001afc:	e000      	b.n	8001b00 <test_button+0x110>
						break;
 8001afe:	bf00      	nop
	for(int i = 0; i < 16; i++){
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3301      	adds	r3, #1
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	f77f af77 	ble.w	80019fc <test_button+0xc>
			}

//			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000060 	.word	0x20000060
 8001b1c:	20000048 	.word	0x20000048
 8001b20:	20000114 	.word	0x20000114
 8001b24:	20000118 	.word	0x20000118
 8001b28:	2000010c 	.word	0x2000010c
 8001b2c:	2000004c 	.word	0x2000004c
 8001b30:	20000008 	.word	0x20000008
 8001b34:	2000000c 	.word	0x2000000c
 8001b38:	20000010 	.word	0x20000010
 8001b3c:	20000110 	.word	0x20000110

08001b40 <test_lcd>:
void test_lcd(){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af02      	add	r7, sp, #8
	lcd_Fill(0, 0, 240, 360, WHITE);
 8001b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001b50:	22f0      	movs	r2, #240	; 0xf0
 8001b52:	2100      	movs	r1, #0
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7fe ff71 	bl	8000a3c <lcd_Fill>
//	lcd_StrCenter(0, 2, "Hello World !!!", RED, BLUE, 16, 1);
//	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);

	lcd_DrawCircle(60, 40, BLACK, 20, 1);
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2314      	movs	r3, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	2128      	movs	r1, #40	; 0x28
 8001b64:	203c      	movs	r0, #60	; 0x3c
 8001b66:	f7ff fb30 	bl	80011ca <lcd_DrawCircle>
	lcd_DrawCircle(60, 100, BLACK, 20, 1);
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2314      	movs	r3, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	2164      	movs	r1, #100	; 0x64
 8001b74:	203c      	movs	r0, #60	; 0x3c
 8001b76:	f7ff fb28 	bl	80011ca <lcd_DrawCircle>
	lcd_DrawCircle(60, 160, BLACK, 20, 1);
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2314      	movs	r3, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	21a0      	movs	r1, #160	; 0xa0
 8001b84:	203c      	movs	r0, #60	; 0x3c
 8001b86:	f7ff fb20 	bl	80011ca <lcd_DrawCircle>

	lcd_DrawCircle(60, 240, BLACK, 20, 1);
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2314      	movs	r3, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	21f0      	movs	r1, #240	; 0xf0
 8001b94:	203c      	movs	r0, #60	; 0x3c
 8001b96:	f7ff fb18 	bl	80011ca <lcd_DrawCircle>
	lcd_DrawCircle(120, 240, BLACK, 20, 1);
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2314      	movs	r3, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	21f0      	movs	r1, #240	; 0xf0
 8001ba4:	2078      	movs	r0, #120	; 0x78
 8001ba6:	f7ff fb10 	bl	80011ca <lcd_DrawCircle>
	lcd_DrawCircle(180, 240, BLACK, 20, 1);
 8001baa:	2301      	movs	r3, #1
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2314      	movs	r3, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	21f0      	movs	r1, #240	; 0xf0
 8001bb4:	20b4      	movs	r0, #180	; 0xb4
 8001bb6:	f7ff fb08 	bl	80011ca <lcd_DrawCircle>
//	lcd_DrawCircle(160, 100, YELLOW, 20, 1);
//	lcd_DrawCircle(160, 40, GREEN, 20, 1);

//	lcd_DrawCircle(160, 120, BRED, 40, 0);
//	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <Error_Handler+0x8>
	...

08001bcc <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <timer_init+0x10>)
 8001bd2:	f001 ffe5 	bl	8003ba0 <HAL_TIM_Base_Start_IT>
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000174 	.word	0x20000174

08001be0 <setTimer1>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer1(uint16_t duration){
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
	timer1_MUL = duration/TIMER_CYCLE_1;
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <setTimer1+0x2c>)
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	8013      	strh	r3, [r2, #0]
	timer1_counter = timer1_MUL;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <setTimer1+0x2c>)
 8001bf2:	881a      	ldrh	r2, [r3, #0]
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <setTimer1+0x30>)
 8001bf6:	801a      	strh	r2, [r3, #0]
	flag_timer1 = 0;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <setTimer1+0x34>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000058 	.word	0x20000058
 8001c10:	20000056 	.word	0x20000056
 8001c14:	20000054 	.word	0x20000054

08001c18 <setTimer2>:

void setTimer2(uint16_t duration){
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <setTimer2+0x2c>)
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <setTimer2+0x2c>)
 8001c2a:	881a      	ldrh	r2, [r3, #0]
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <setTimer2+0x30>)
 8001c2e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <setTimer2+0x34>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	801a      	strh	r2, [r3, #0]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000005e 	.word	0x2000005e
 8001c48:	2000005c 	.word	0x2000005c
 8001c4c:	2000005a 	.word	0x2000005a

08001c50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c60:	d12b      	bne.n	8001cba <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer1_counter > 0){
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d010      	beq.n	8001c8c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer1_counter--;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c74:	801a      	strh	r2, [r3, #0]
			if(timer1_counter == 0) {
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer1 = 1;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	801a      	strh	r2, [r3, #0]
				timer1_counter = timer1_MUL;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c8a:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer2_counter > 0){
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d010      	beq.n	8001cb6 <HAL_TIM_PeriodElapsedCallback+0x66>
			timer2_counter--;
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c9e:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer2 = 1;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001cb4:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8001cb6:	f7ff fb01 	bl	80012bc <led7_Scan>
	}
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000056 	.word	0x20000056
 8001cc8:	20000054 	.word	0x20000054
 8001ccc:	20000058 	.word	0x20000058
 8001cd0:	2000005c 	.word	0x2000005c
 8001cd4:	2000005a 	.word	0x2000005a
 8001cd8:	2000005e 	.word	0x2000005e

08001cdc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <MX_SPI1_Init+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d28:	220a      	movs	r2, #10
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d2c:	4804      	ldr	r0, [pc, #16]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d2e:	f001 f8fb 	bl	8002f28 <HAL_SPI_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d38:	f7ff ff42 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000011c 	.word	0x2000011c
 8001d44:	40013000 	.word	0x40013000

08001d48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_SPI_MspInit+0x84>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d12b      	bne.n	8001dc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_SPI_MspInit+0x88>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_SPI_MspInit+0x88>)
 8001d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_SPI_MspInit+0x88>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_SPI_MspInit+0x88>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_SPI_MspInit+0x88>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_SPI_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001da2:	2338      	movs	r3, #56	; 0x38
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001db2:	2305      	movs	r3, #5
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <HAL_SPI_MspInit+0x8c>)
 8001dbe:	f000 fabd 	bl	800233c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	; 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40013000 	.word	0x40013000
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_MspInit+0x4c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a0f      	ldr	r2, [pc, #60]	; (8001e24 <HAL_MspInit+0x4c>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_MspInit+0x4c>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_MspInit+0x4c>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_MspInit+0x4c>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_MspInit+0x4c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <NMI_Handler+0x4>

08001e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <HardFault_Handler+0x4>

08001e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <MemManage_Handler+0x4>

08001e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e74:	f000 f90c 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <TIM2_IRQHandler+0x10>)
 8001e82:	f001 fefd 	bl	8003c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000174 	.word	0x20000174

08001e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec8:	463b      	mov	r3, r7
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <MX_TIM2_Init+0x94>)
 8001ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <MX_TIM2_Init+0x94>)
 8001eda:	f240 3247 	movw	r2, #839	; 0x347
 8001ede:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <MX_TIM2_Init+0x94>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <MX_TIM2_Init+0x94>)
 8001ee8:	2263      	movs	r2, #99	; 0x63
 8001eea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <MX_TIM2_Init+0x94>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <MX_TIM2_Init+0x94>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ef8:	4813      	ldr	r0, [pc, #76]	; (8001f48 <MX_TIM2_Init+0x94>)
 8001efa:	f001 fe01 	bl	8003b00 <HAL_TIM_Base_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f04:	f7ff fe5c 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	4619      	mov	r1, r3
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <MX_TIM2_Init+0x94>)
 8001f16:	f001 ffbb 	bl	8003e90 <HAL_TIM_ConfigClockSource>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f20:	f7ff fe4e 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_TIM2_Init+0x94>)
 8001f32:	f002 f9d7 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f3c:	f7ff fe40 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000174 	.word	0x20000174

08001f4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d115      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_TIM_Base_MspInit+0x48>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HAL_TIM_Base_MspInit+0x48>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_TIM_Base_MspInit+0x48>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	201c      	movs	r0, #28
 8001f80:	f000 f9a5 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f84:	201c      	movs	r0, #28
 8001f86:	f000 f9be 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800

08001f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f9c:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f9e:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fb4:	4c0b      	ldr	r4, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fc2:	f7ff ff65 	bl	8001e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f002 faed 	bl	80045a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fca:	f7ff fa03 	bl	80013d4 <main>
  bx  lr    
 8001fce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001fdc:	080075b4 	.word	0x080075b4
  ldr r2, =_sbss
 8001fe0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001fe4:	200001c0 	.word	0x200001c0

08001fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC_IRQHandler>
	...

08001fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_Init+0x40>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_Init+0x40>)
 8002002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_Init+0x40>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002014:	2003      	movs	r0, #3
 8002016:	f000 f94f 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201a:	200f      	movs	r0, #15
 800201c:	f000 f808 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002020:	f7ff feda 	bl	8001dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_InitTick+0x54>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_InitTick+0x58>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f967 	bl	8002322 <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f000 f92f 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <HAL_InitTick+0x5c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000014 	.word	0x20000014
 8002088:	2000001c 	.word	0x2000001c
 800208c:	20000018 	.word	0x20000018

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	2000001c 	.word	0x2000001c
 80020b4:	200001bc 	.word	0x200001bc

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	200001bc 	.word	0x200001bc

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d005      	beq.n	80020f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_Delay+0x44>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020f6:	bf00      	nop
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d8f7      	bhi.n	80020f8 <HAL_Delay+0x28>
  {
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2000001c 	.word	0x2000001c

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	; (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff29 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff3e 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff8e 	bl	800220c <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5d 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff31 	bl	800217c <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	e16b      	b.n	8002630 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002358:	2201      	movs	r2, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	429a      	cmp	r2, r3
 8002372:	f040 815a 	bne.w	800262a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d005      	beq.n	800238e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238a:	2b02      	cmp	r3, #2
 800238c:	d130      	bne.n	80023f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c4:	2201      	movs	r2, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 0201 	and.w	r2, r3, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d017      	beq.n	800242c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d123      	bne.n	8002480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	08da      	lsrs	r2, r3, #3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3208      	adds	r2, #8
 8002440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	08da      	lsrs	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3208      	adds	r2, #8
 800247a:	69b9      	ldr	r1, [r7, #24]
 800247c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0203 	and.w	r2, r3, #3
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80b4 	beq.w	800262a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	4b60      	ldr	r3, [pc, #384]	; (8002648 <HAL_GPIO_Init+0x30c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4a5f      	ldr	r2, [pc, #380]	; (8002648 <HAL_GPIO_Init+0x30c>)
 80024cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	4b5d      	ldr	r3, [pc, #372]	; (8002648 <HAL_GPIO_Init+0x30c>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024de:	4a5b      	ldr	r2, [pc, #364]	; (800264c <HAL_GPIO_Init+0x310>)
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	089b      	lsrs	r3, r3, #2
 80024e4:	3302      	adds	r3, #2
 80024e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	220f      	movs	r2, #15
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_GPIO_Init+0x314>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d02b      	beq.n	8002562 <HAL_GPIO_Init+0x226>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a51      	ldr	r2, [pc, #324]	; (8002654 <HAL_GPIO_Init+0x318>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d025      	beq.n	800255e <HAL_GPIO_Init+0x222>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a50      	ldr	r2, [pc, #320]	; (8002658 <HAL_GPIO_Init+0x31c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01f      	beq.n	800255a <HAL_GPIO_Init+0x21e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a4f      	ldr	r2, [pc, #316]	; (800265c <HAL_GPIO_Init+0x320>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d019      	beq.n	8002556 <HAL_GPIO_Init+0x21a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4e      	ldr	r2, [pc, #312]	; (8002660 <HAL_GPIO_Init+0x324>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <HAL_GPIO_Init+0x216>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4d      	ldr	r2, [pc, #308]	; (8002664 <HAL_GPIO_Init+0x328>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00d      	beq.n	800254e <HAL_GPIO_Init+0x212>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4c      	ldr	r2, [pc, #304]	; (8002668 <HAL_GPIO_Init+0x32c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <HAL_GPIO_Init+0x20e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4b      	ldr	r2, [pc, #300]	; (800266c <HAL_GPIO_Init+0x330>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_GPIO_Init+0x20a>
 8002542:	2307      	movs	r3, #7
 8002544:	e00e      	b.n	8002564 <HAL_GPIO_Init+0x228>
 8002546:	2308      	movs	r3, #8
 8002548:	e00c      	b.n	8002564 <HAL_GPIO_Init+0x228>
 800254a:	2306      	movs	r3, #6
 800254c:	e00a      	b.n	8002564 <HAL_GPIO_Init+0x228>
 800254e:	2305      	movs	r3, #5
 8002550:	e008      	b.n	8002564 <HAL_GPIO_Init+0x228>
 8002552:	2304      	movs	r3, #4
 8002554:	e006      	b.n	8002564 <HAL_GPIO_Init+0x228>
 8002556:	2303      	movs	r3, #3
 8002558:	e004      	b.n	8002564 <HAL_GPIO_Init+0x228>
 800255a:	2302      	movs	r3, #2
 800255c:	e002      	b.n	8002564 <HAL_GPIO_Init+0x228>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_GPIO_Init+0x228>
 8002562:	2300      	movs	r3, #0
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	f002 0203 	and.w	r2, r2, #3
 800256a:	0092      	lsls	r2, r2, #2
 800256c:	4093      	lsls	r3, r2
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002574:	4935      	ldr	r1, [pc, #212]	; (800264c <HAL_GPIO_Init+0x310>)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	3302      	adds	r3, #2
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <HAL_GPIO_Init+0x334>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a6:	4a32      	ldr	r2, [pc, #200]	; (8002670 <HAL_GPIO_Init+0x334>)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025ac:	4b30      	ldr	r3, [pc, #192]	; (8002670 <HAL_GPIO_Init+0x334>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <HAL_GPIO_Init+0x334>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <HAL_GPIO_Init+0x334>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fa:	4a1d      	ldr	r2, [pc, #116]	; (8002670 <HAL_GPIO_Init+0x334>)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_GPIO_Init+0x334>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002624:	4a12      	ldr	r2, [pc, #72]	; (8002670 <HAL_GPIO_Init+0x334>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3301      	adds	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b0f      	cmp	r3, #15
 8002634:	f67f ae90 	bls.w	8002358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3724      	adds	r7, #36	; 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	40013800 	.word	0x40013800
 8002650:	40020000 	.word	0x40020000
 8002654:	40020400 	.word	0x40020400
 8002658:	40020800 	.word	0x40020800
 800265c:	40020c00 	.word	0x40020c00
 8002660:	40021000 	.word	0x40021000
 8002664:	40021400 	.word	0x40021400
 8002668:	40021800 	.word	0x40021800
 800266c:	40021c00 	.word	0x40021c00
 8002670:	40013c00 	.word	0x40013c00

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002690:	e003      	b.n	800269a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	041a      	lsls	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	619a      	str	r2, [r3, #24]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e264      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d075      	beq.n	80027b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026c6:	4ba3      	ldr	r3, [pc, #652]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d00c      	beq.n	80026ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d2:	4ba0      	ldr	r3, [pc, #640]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b9d      	ldr	r3, [pc, #628]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b99      	ldr	r3, [pc, #612]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05b      	beq.n	80027b0 <HAL_RCC_OscConfig+0x108>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d157      	bne.n	80027b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e23f      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d106      	bne.n	800271c <HAL_RCC_OscConfig+0x74>
 800270e:	4b91      	ldr	r3, [pc, #580]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a90      	ldr	r2, [pc, #576]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e01d      	b.n	8002758 <HAL_RCC_OscConfig+0xb0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x98>
 8002726:	4b8b      	ldr	r3, [pc, #556]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a8a      	ldr	r2, [pc, #552]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b88      	ldr	r3, [pc, #544]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a87      	ldr	r2, [pc, #540]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0xb0>
 8002740:	4b84      	ldr	r3, [pc, #528]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a83      	ldr	r2, [pc, #524]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b81      	ldr	r3, [pc, #516]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a80      	ldr	r2, [pc, #512]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff fcaa 	bl	80020b8 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff fca6 	bl	80020b8 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e204      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b76      	ldr	r3, [pc, #472]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0xc0>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff fc96 	bl	80020b8 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff fc92 	bl	80020b8 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1f0      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	4b6c      	ldr	r3, [pc, #432]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0xe8>
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d063      	beq.n	8002886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027be:	4b65      	ldr	r3, [pc, #404]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ca:	4b62      	ldr	r3, [pc, #392]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d11c      	bne.n	8002810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b5f      	ldr	r3, [pc, #380]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	4b5c      	ldr	r3, [pc, #368]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_RCC_OscConfig+0x152>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1c4      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fa:	4b56      	ldr	r3, [pc, #344]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4952      	ldr	r1, [pc, #328]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	e03a      	b.n	8002886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002818:	4b4f      	ldr	r3, [pc, #316]	; (8002958 <HAL_RCC_OscConfig+0x2b0>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7ff fc4b 	bl	80020b8 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002826:	f7ff fc47 	bl	80020b8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1a5      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	4b46      	ldr	r3, [pc, #280]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b43      	ldr	r3, [pc, #268]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4940      	ldr	r1, [pc, #256]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	e015      	b.n	8002886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <HAL_RCC_OscConfig+0x2b0>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7ff fc2a 	bl	80020b8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002868:	f7ff fc26 	bl	80020b8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e184      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d030      	beq.n	80028f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289a:	4b30      	ldr	r3, [pc, #192]	; (800295c <HAL_RCC_OscConfig+0x2b4>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7ff fc0a 	bl	80020b8 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a8:	f7ff fc06 	bl	80020b8 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e164      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x200>
 80028c6:	e015      	b.n	80028f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c8:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_RCC_OscConfig+0x2b4>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7ff fbf3 	bl	80020b8 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d6:	f7ff fbef 	bl	80020b8 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e14d      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 80028ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a0 	beq.w	8002a42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCC_OscConfig+0x2b8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d121      	bne.n	8002982 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_RCC_OscConfig+0x2b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_RCC_OscConfig+0x2b8>)
 8002944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294a:	f7ff fbb5 	bl	80020b8 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	e011      	b.n	8002976 <HAL_RCC_OscConfig+0x2ce>
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	42470000 	.word	0x42470000
 800295c:	42470e80 	.word	0x42470e80
 8002960:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7ff fba8 	bl	80020b8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e106      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	4b85      	ldr	r3, [pc, #532]	; (8002b8c <HAL_RCC_OscConfig+0x4e4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d106      	bne.n	8002998 <HAL_RCC_OscConfig+0x2f0>
 800298a:	4b81      	ldr	r3, [pc, #516]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	4a80      	ldr	r2, [pc, #512]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6713      	str	r3, [r2, #112]	; 0x70
 8002996:	e01c      	b.n	80029d2 <HAL_RCC_OscConfig+0x32a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b05      	cmp	r3, #5
 800299e:	d10c      	bne.n	80029ba <HAL_RCC_OscConfig+0x312>
 80029a0:	4b7b      	ldr	r3, [pc, #492]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	4a7a      	ldr	r2, [pc, #488]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	6713      	str	r3, [r2, #112]	; 0x70
 80029ac:	4b78      	ldr	r3, [pc, #480]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	4a77      	ldr	r2, [pc, #476]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6713      	str	r3, [r2, #112]	; 0x70
 80029b8:	e00b      	b.n	80029d2 <HAL_RCC_OscConfig+0x32a>
 80029ba:	4b75      	ldr	r3, [pc, #468]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a74      	ldr	r2, [pc, #464]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
 80029c6:	4b72      	ldr	r3, [pc, #456]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a71      	ldr	r2, [pc, #452]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 80029cc:	f023 0304 	bic.w	r3, r3, #4
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d015      	beq.n	8002a06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029da:	f7ff fb6d 	bl	80020b8 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7ff fb69 	bl	80020b8 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0c5      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f8:	4b65      	ldr	r3, [pc, #404]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ee      	beq.n	80029e2 <HAL_RCC_OscConfig+0x33a>
 8002a04:	e014      	b.n	8002a30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7ff fb57 	bl	80020b8 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7ff fb53 	bl	80020b8 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e0af      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a24:	4b5a      	ldr	r3, [pc, #360]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ee      	bne.n	8002a0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d105      	bne.n	8002a42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a36:	4b56      	ldr	r3, [pc, #344]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a55      	ldr	r2, [pc, #340]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 809b 	beq.w	8002b82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a4c:	4b50      	ldr	r3, [pc, #320]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d05c      	beq.n	8002b12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d141      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_OscConfig+0x4ec>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7ff fb27 	bl	80020b8 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7ff fb23 	bl	80020b8 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e081      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a80:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f0      	bne.n	8002a6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	019b      	lsls	r3, r3, #6
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	041b      	lsls	r3, r3, #16
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	061b      	lsls	r3, r3, #24
 8002ab0:	4937      	ldr	r1, [pc, #220]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab6:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <HAL_RCC_OscConfig+0x4ec>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7ff fafc 	bl	80020b8 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7ff faf8 	bl	80020b8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e056      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x41c>
 8002ae2:	e04e      	b.n	8002b82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_RCC_OscConfig+0x4ec>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7ff fae5 	bl	80020b8 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af2:	f7ff fae1 	bl	80020b8 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e03f      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x44a>
 8002b10:	e037      	b.n	8002b82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e032      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <HAL_RCC_OscConfig+0x4e8>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d028      	beq.n	8002b7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d121      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d11a      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b4e:	4013      	ands	r3, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d111      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	3b01      	subs	r3, #1
 8002b68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	40023800 	.word	0x40023800
 8002b94:	42470060 	.word	0x42470060

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0cc      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d90c      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b65      	ldr	r3, [pc, #404]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0b8      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	494d      	ldr	r1, [pc, #308]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d044      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d119      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e067      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4934      	ldr	r1, [pc, #208]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c88:	f7ff fa16 	bl	80020b8 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c90:	f7ff fa12 	bl	80020b8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e04f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 020c 	and.w	r2, r3, #12
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1eb      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d20c      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e032      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4916      	ldr	r1, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	490e      	ldr	r1, [pc, #56]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d1e:	f000 f821 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	490a      	ldr	r1, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	5ccb      	ldrb	r3, [r1, r3]
 8002d32:	fa22 f303 	lsr.w	r3, r2, r3
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff f976 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023c00 	.word	0x40023c00
 8002d54:	40023800 	.word	0x40023800
 8002d58:	08007594 	.word	0x08007594
 8002d5c:	20000014 	.word	0x20000014
 8002d60:	20000018 	.word	0x20000018

08002d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	2300      	movs	r3, #0
 8002d76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d7c:	4b67      	ldr	r3, [pc, #412]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d00d      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	f200 80bd 	bhi.w	8002f08 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x34>
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d003      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d96:	e0b7      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b61      	ldr	r3, [pc, #388]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d9a:	60bb      	str	r3, [r7, #8]
       break;
 8002d9c:	e0b7      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d9e:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002da0:	60bb      	str	r3, [r7, #8]
      break;
 8002da2:	e0b4      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da4:	4b5d      	ldr	r3, [pc, #372]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dae:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d04d      	beq.n	8002e56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dba:	4b58      	ldr	r3, [pc, #352]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	ea02 0800 	and.w	r8, r2, r0
 8002dd2:	ea03 0901 	and.w	r9, r3, r1
 8002dd6:	4640      	mov	r0, r8
 8002dd8:	4649      	mov	r1, r9
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	014b      	lsls	r3, r1, #5
 8002de4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002de8:	0142      	lsls	r2, r0, #5
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	ebb0 0008 	subs.w	r0, r0, r8
 8002df2:	eb61 0109 	sbc.w	r1, r1, r9
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	018b      	lsls	r3, r1, #6
 8002e00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e04:	0182      	lsls	r2, r0, #6
 8002e06:	1a12      	subs	r2, r2, r0
 8002e08:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0c:	f04f 0000 	mov.w	r0, #0
 8002e10:	f04f 0100 	mov.w	r1, #0
 8002e14:	00d9      	lsls	r1, r3, #3
 8002e16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e1a:	00d0      	lsls	r0, r2, #3
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	eb12 0208 	adds.w	r2, r2, r8
 8002e24:	eb43 0309 	adc.w	r3, r3, r9
 8002e28:	f04f 0000 	mov.w	r0, #0
 8002e2c:	f04f 0100 	mov.w	r1, #0
 8002e30:	0259      	lsls	r1, r3, #9
 8002e32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e36:	0250      	lsls	r0, r2, #9
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	f7fd f9be 	bl	80001c8 <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4613      	mov	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e04a      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e56:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	099b      	lsrs	r3, r3, #6
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e66:	f04f 0100 	mov.w	r1, #0
 8002e6a:	ea02 0400 	and.w	r4, r2, r0
 8002e6e:	ea03 0501 	and.w	r5, r3, r1
 8002e72:	4620      	mov	r0, r4
 8002e74:	4629      	mov	r1, r5
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	014b      	lsls	r3, r1, #5
 8002e80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e84:	0142      	lsls	r2, r0, #5
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	1b00      	subs	r0, r0, r4
 8002e8c:	eb61 0105 	sbc.w	r1, r1, r5
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	018b      	lsls	r3, r1, #6
 8002e9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e9e:	0182      	lsls	r2, r0, #6
 8002ea0:	1a12      	subs	r2, r2, r0
 8002ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea6:	f04f 0000 	mov.w	r0, #0
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	00d9      	lsls	r1, r3, #3
 8002eb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002eb4:	00d0      	lsls	r0, r2, #3
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	1912      	adds	r2, r2, r4
 8002ebc:	eb45 0303 	adc.w	r3, r5, r3
 8002ec0:	f04f 0000 	mov.w	r0, #0
 8002ec4:	f04f 0100 	mov.w	r1, #0
 8002ec8:	0299      	lsls	r1, r3, #10
 8002eca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ece:	0290      	lsls	r0, r2, #10
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	f7fd f972 	bl	80001c8 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	60bb      	str	r3, [r7, #8]
      break;
 8002f06:	e002      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f0a:	60bb      	str	r3, [r7, #8]
      break;
 8002f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	00f42400 	.word	0x00f42400
 8002f24:	007a1200 	.word	0x007a1200

08002f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e07b      	b.n	8003032 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d108      	bne.n	8002f54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f4a:	d009      	beq.n	8002f60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61da      	str	r2, [r3, #28]
 8002f52:	e005      	b.n	8002f60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fe fee4 	bl	8001d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	ea42 0103 	orr.w	r1, r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0104 	and.w	r1, r3, #4
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	f003 0210 	and.w	r2, r3, #16
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003020:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b088      	sub	sp, #32
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	4613      	mov	r3, r2
 8003048:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_SPI_Transmit+0x22>
 8003058:	2302      	movs	r3, #2
 800305a:	e126      	b.n	80032aa <HAL_SPI_Transmit+0x270>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003064:	f7ff f828 	bl	80020b8 <HAL_GetTick>
 8003068:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d002      	beq.n	8003080 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800307a:	2302      	movs	r3, #2
 800307c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800307e:	e10b      	b.n	8003298 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_SPI_Transmit+0x52>
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003090:	e102      	b.n	8003298 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2203      	movs	r2, #3
 8003096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	88fa      	ldrh	r2, [r7, #6]
 80030aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d8:	d10f      	bne.n	80030fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003104:	2b40      	cmp	r3, #64	; 0x40
 8003106:	d007      	beq.n	8003118 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003116:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003120:	d14b      	bne.n	80031ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_SPI_Transmit+0xf6>
 800312a:	8afb      	ldrh	r3, [r7, #22]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d13e      	bne.n	80031ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	1c9a      	adds	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003154:	e02b      	b.n	80031ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	d112      	bne.n	800318a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	881a      	ldrh	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	1c9a      	adds	r2, r3, #2
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	86da      	strh	r2, [r3, #54]	; 0x36
 8003188:	e011      	b.n	80031ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800318a:	f7fe ff95 	bl	80020b8 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d803      	bhi.n	80031a2 <HAL_SPI_Transmit+0x168>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d102      	bne.n	80031a8 <HAL_SPI_Transmit+0x16e>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031ac:	e074      	b.n	8003298 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ce      	bne.n	8003156 <HAL_SPI_Transmit+0x11c>
 80031b8:	e04c      	b.n	8003254 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_SPI_Transmit+0x18e>
 80031c2:	8afb      	ldrh	r3, [r7, #22]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d140      	bne.n	800324a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	7812      	ldrb	r2, [r2, #0]
 80031d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031ee:	e02c      	b.n	800324a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d113      	bne.n	8003226 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	7812      	ldrb	r2, [r2, #0]
 800320a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	86da      	strh	r2, [r3, #54]	; 0x36
 8003224:	e011      	b.n	800324a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003226:	f7fe ff47 	bl	80020b8 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d803      	bhi.n	800323e <HAL_SPI_Transmit+0x204>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d102      	bne.n	8003244 <HAL_SPI_Transmit+0x20a>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003248:	e026      	b.n	8003298 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1cd      	bne.n	80031f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fbcb 	bl	80039f4 <SPI_EndRxTxTransaction>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e000      	b.n	8003298 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003296:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b088      	sub	sp, #32
 80032b6:	af02      	add	r7, sp, #8
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ce:	d112      	bne.n	80032f6 <HAL_SPI_Receive+0x44>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10e      	bne.n	80032f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2204      	movs	r2, #4
 80032dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032e0:	88fa      	ldrh	r2, [r7, #6]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f8f1 	bl	80034d4 <HAL_SPI_TransmitReceive>
 80032f2:	4603      	mov	r3, r0
 80032f4:	e0ea      	b.n	80034cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_SPI_Receive+0x52>
 8003300:	2302      	movs	r3, #2
 8003302:	e0e3      	b.n	80034cc <HAL_SPI_Receive+0x21a>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800330c:	f7fe fed4 	bl	80020b8 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d002      	beq.n	8003324 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800331e:	2302      	movs	r3, #2
 8003320:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003322:	e0ca      	b.n	80034ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Receive+0x7e>
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003334:	e0c1      	b.n	80034ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2204      	movs	r2, #4
 800333a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	88fa      	ldrh	r2, [r7, #6]
 800334e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	88fa      	ldrh	r2, [r7, #6]
 8003354:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337c:	d10f      	bne.n	800339e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800339c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d007      	beq.n	80033bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d162      	bne.n	800348a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033c4:	e02e      	b.n	8003424 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d115      	bne.n	8003400 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f103 020c 	add.w	r2, r3, #12
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033fe:	e011      	b.n	8003424 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003400:	f7fe fe5a 	bl	80020b8 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d803      	bhi.n	8003418 <HAL_SPI_Receive+0x166>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003416:	d102      	bne.n	800341e <HAL_SPI_Receive+0x16c>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003422:	e04a      	b.n	80034ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1cb      	bne.n	80033c6 <HAL_SPI_Receive+0x114>
 800342e:	e031      	b.n	8003494 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d113      	bne.n	8003466 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	b292      	uxth	r2, r2
 800344a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	1c9a      	adds	r2, r3, #2
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003464:	e011      	b.n	800348a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003466:	f7fe fe27 	bl	80020b8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d803      	bhi.n	800347e <HAL_SPI_Receive+0x1cc>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d102      	bne.n	8003484 <HAL_SPI_Receive+0x1d2>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003488:	e017      	b.n	80034ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1cd      	bne.n	8003430 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	6839      	ldr	r1, [r7, #0]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fa45 	bl	8003928 <SPI_EndRxTransaction>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
 80034b6:	e000      	b.n	80034ba <HAL_SPI_Receive+0x208>
  }

error :
 80034b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034e2:	2301      	movs	r3, #1
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x26>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e18a      	b.n	8003810 <HAL_SPI_TransmitReceive+0x33c>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003502:	f7fe fdd9 	bl	80020b8 <HAL_GetTick>
 8003506:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003518:	887b      	ldrh	r3, [r7, #2]
 800351a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800351c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003520:	2b01      	cmp	r3, #1
 8003522:	d00f      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x70>
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352a:	d107      	bne.n	800353c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d103      	bne.n	800353c <HAL_SPI_TransmitReceive+0x68>
 8003534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003538:	2b04      	cmp	r3, #4
 800353a:	d003      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800353c:	2302      	movs	r3, #2
 800353e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003542:	e15b      	b.n	80037fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_SPI_TransmitReceive+0x82>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_SPI_TransmitReceive+0x82>
 8003550:	887b      	ldrh	r3, [r7, #2]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800355c:	e14e      	b.n	80037fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b04      	cmp	r3, #4
 8003568:	d003      	beq.n	8003572 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2205      	movs	r2, #5
 800356e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	887a      	ldrh	r2, [r7, #2]
 8003582:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	887a      	ldrh	r2, [r7, #2]
 800359a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d007      	beq.n	80035c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ce:	d178      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_SPI_TransmitReceive+0x10a>
 80035d8:	8b7b      	ldrh	r3, [r7, #26]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d166      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	881a      	ldrh	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	1c9a      	adds	r2, r3, #2
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003602:	e053      	b.n	80036ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d11b      	bne.n	800364a <HAL_SPI_TransmitReceive+0x176>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d016      	beq.n	800364a <HAL_SPI_TransmitReceive+0x176>
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d113      	bne.n	800364a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	881a      	ldrh	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	1c9a      	adds	r2, r3, #2
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d119      	bne.n	800368c <HAL_SPI_TransmitReceive+0x1b8>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d014      	beq.n	800368c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	b292      	uxth	r2, r2
 800366e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	1c9a      	adds	r2, r3, #2
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003688:	2301      	movs	r3, #1
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800368c:	f7fe fd14 	bl	80020b8 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003698:	429a      	cmp	r2, r3
 800369a:	d807      	bhi.n	80036ac <HAL_SPI_TransmitReceive+0x1d8>
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d003      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036aa:	e0a7      	b.n	80037fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1a6      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x130>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1a1      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x130>
 80036c0:	e07c      	b.n	80037bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_SPI_TransmitReceive+0x1fc>
 80036ca:	8b7b      	ldrh	r3, [r7, #26]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d16b      	bne.n	80037a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036f6:	e057      	b.n	80037a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d11c      	bne.n	8003740 <HAL_SPI_TransmitReceive+0x26c>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d017      	beq.n	8003740 <HAL_SPI_TransmitReceive+0x26c>
 8003710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d114      	bne.n	8003740 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	330c      	adds	r3, #12
 8003720:	7812      	ldrb	r2, [r2, #0]
 8003722:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b01      	cmp	r3, #1
 800374c:	d119      	bne.n	8003782 <HAL_SPI_TransmitReceive+0x2ae>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d014      	beq.n	8003782 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800377e:	2301      	movs	r3, #1
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003782:	f7fe fc99 	bl	80020b8 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800378e:	429a      	cmp	r2, r3
 8003790:	d803      	bhi.n	800379a <HAL_SPI_TransmitReceive+0x2c6>
 8003792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d102      	bne.n	80037a0 <HAL_SPI_TransmitReceive+0x2cc>
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037a6:	e029      	b.n	80037fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1a2      	bne.n	80036f8 <HAL_SPI_TransmitReceive+0x224>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d19d      	bne.n	80036f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f917 	bl	80039f4 <SPI_EndRxTxTransaction>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d006      	beq.n	80037da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037d8:	e010      	b.n	80037fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	e000      	b.n	80037fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800380c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003810:	4618      	mov	r0, r3
 8003812:	3730      	adds	r7, #48	; 0x30
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003828:	f7fe fc46 	bl	80020b8 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	4413      	add	r3, r2
 8003836:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003838:	f7fe fc3e 	bl	80020b8 <HAL_GetTick>
 800383c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	015b      	lsls	r3, r3, #5
 8003844:	0d1b      	lsrs	r3, r3, #20
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800384e:	e054      	b.n	80038fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d050      	beq.n	80038fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003858:	f7fe fc2e 	bl	80020b8 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	429a      	cmp	r2, r3
 8003866:	d902      	bls.n	800386e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d13d      	bne.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800387c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003886:	d111      	bne.n	80038ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003890:	d004      	beq.n	800389c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389a:	d107      	bne.n	80038ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b4:	d10f      	bne.n	80038d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e017      	b.n	800391a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	429a      	cmp	r2, r3
 8003916:	d19b      	bne.n	8003850 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000014 	.word	0x20000014

08003928 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800393c:	d111      	bne.n	8003962 <SPI_EndRxTransaction+0x3a>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003946:	d004      	beq.n	8003952 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003950:	d107      	bne.n	8003962 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003960:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396a:	d12a      	bne.n	80039c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003974:	d012      	beq.n	800399c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2200      	movs	r2, #0
 800397e:	2180      	movs	r1, #128	; 0x80
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7ff ff49 	bl	8003818 <SPI_WaitFlagStateUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d02d      	beq.n	80039e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e026      	b.n	80039ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2200      	movs	r2, #0
 80039a4:	2101      	movs	r1, #1
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f7ff ff36 	bl	8003818 <SPI_WaitFlagStateUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01a      	beq.n	80039e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f043 0220 	orr.w	r2, r3, #32
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e013      	b.n	80039ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2200      	movs	r2, #0
 80039ca:	2101      	movs	r1, #1
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff ff23 	bl	8003818 <SPI_WaitFlagStateUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d007      	beq.n	80039e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039dc:	f043 0220 	orr.w	r2, r3, #32
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e000      	b.n	80039ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <SPI_EndRxTxTransaction+0x7c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <SPI_EndRxTxTransaction+0x80>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	0d5b      	lsrs	r3, r3, #21
 8003a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1e:	d112      	bne.n	8003a46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2200      	movs	r2, #0
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f7ff fef4 	bl	8003818 <SPI_WaitFlagStateUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	f043 0220 	orr.w	r2, r3, #32
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e00f      	b.n	8003a66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b80      	cmp	r3, #128	; 0x80
 8003a5e:	d0f2      	beq.n	8003a46 <SPI_EndRxTxTransaction+0x52>
 8003a60:	e000      	b.n	8003a64 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a62:	bf00      	nop
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000014 	.word	0x20000014
 8003a74:	165e9f81 	.word	0x165e9f81

08003a78 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e034      	b.n	8003af8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7fc fe4a 	bl	800073c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3308      	adds	r3, #8
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f000 fca6 	bl	8004404 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	f000 fcf0 	bl	80044a8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6858      	ldr	r0, [r3, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	f000 fd25 	bl	8004524 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	6892      	ldr	r2, [r2, #8]
 8003ae2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	f041 0101 	orr.w	r1, r1, #1
 8003af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e041      	b.n	8003b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fe fa10 	bl	8001f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	f000 fa96 	bl	8004070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d001      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e04e      	b.n	8003c56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a23      	ldr	r2, [pc, #140]	; (8003c64 <HAL_TIM_Base_Start_IT+0xc4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d022      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be2:	d01d      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1f      	ldr	r2, [pc, #124]	; (8003c68 <HAL_TIM_Base_Start_IT+0xc8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d018      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1e      	ldr	r2, [pc, #120]	; (8003c6c <HAL_TIM_Base_Start_IT+0xcc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00e      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1b      	ldr	r2, [pc, #108]	; (8003c74 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d009      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a19      	ldr	r2, [pc, #100]	; (8003c78 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <HAL_TIM_Base_Start_IT+0xdc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d111      	bne.n	8003c44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b06      	cmp	r3, #6
 8003c30:	d010      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c42:	e007      	b.n	8003c54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40010000 	.word	0x40010000
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40000c00 	.word	0x40000c00
 8003c74:	40010400 	.word	0x40010400
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40001800 	.word	0x40001800

08003c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d122      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d11b      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0202 	mvn.w	r2, #2
 8003cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f9b5 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f9a7 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f9b8 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d122      	bne.n	8003d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d11b      	bne.n	8003d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0204 	mvn.w	r2, #4
 8003d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f98b 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003d1c:	e005      	b.n	8003d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f97d 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f98e 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0208 	mvn.w	r2, #8
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2204      	movs	r2, #4
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f961 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f953 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f964 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	d122      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0210 	mvn.w	r2, #16
 8003da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2208      	movs	r2, #8
 8003dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f937 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f929 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f93a 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d10e      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d107      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0201 	mvn.w	r2, #1
 8003dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd ff26 	bl	8001c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	2b80      	cmp	r3, #128	; 0x80
 8003e10:	d10e      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1c:	2b80      	cmp	r3, #128	; 0x80
 8003e1e:	d107      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fae0 	bl	80043f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d10e      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d107      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f8ff 	bl	800405a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d10e      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d107      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0220 	mvn.w	r2, #32
 8003e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 faaa 	bl	80043dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_TIM_ConfigClockSource+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e0b4      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x186>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee4:	d03e      	beq.n	8003f64 <HAL_TIM_ConfigClockSource+0xd4>
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eea:	f200 8087 	bhi.w	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef2:	f000 8086 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x172>
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efa:	d87f      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b70      	cmp	r3, #112	; 0x70
 8003efe:	d01a      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0xa6>
 8003f00:	2b70      	cmp	r3, #112	; 0x70
 8003f02:	d87b      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b60      	cmp	r3, #96	; 0x60
 8003f06:	d050      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x11a>
 8003f08:	2b60      	cmp	r3, #96	; 0x60
 8003f0a:	d877      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b50      	cmp	r3, #80	; 0x50
 8003f0e:	d03c      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0xfa>
 8003f10:	2b50      	cmp	r3, #80	; 0x50
 8003f12:	d873      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	d058      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x13a>
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d86f      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b30      	cmp	r3, #48	; 0x30
 8003f1e:	d064      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f20:	2b30      	cmp	r3, #48	; 0x30
 8003f22:	d86b      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d060      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d867      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05c      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d05a      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f34:	e062      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6899      	ldr	r1, [r3, #8]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f000 f9ad 	bl	80042a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	609a      	str	r2, [r3, #8]
      break;
 8003f62:	e04f      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	6899      	ldr	r1, [r3, #8]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f000 f996 	bl	80042a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f86:	609a      	str	r2, [r3, #8]
      break;
 8003f88:	e03c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	461a      	mov	r2, r3
 8003f98:	f000 f90a 	bl	80041b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2150      	movs	r1, #80	; 0x50
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f963 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 8003fa8:	e02c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f000 f929 	bl	800420e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2160      	movs	r1, #96	; 0x60
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f953 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 8003fc8:	e01c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6859      	ldr	r1, [r3, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f000 f8ea 	bl	80041b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2140      	movs	r1, #64	; 0x40
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f943 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 8003fe8:	e00c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f000 f93a 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 8003ffa:	e003      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8004000:	e000      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004002:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a40      	ldr	r2, [pc, #256]	; (8004184 <TIM_Base_SetConfig+0x114>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408e:	d00f      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a3d      	ldr	r2, [pc, #244]	; (8004188 <TIM_Base_SetConfig+0x118>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a3c      	ldr	r2, [pc, #240]	; (800418c <TIM_Base_SetConfig+0x11c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3b      	ldr	r2, [pc, #236]	; (8004190 <TIM_Base_SetConfig+0x120>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3a      	ldr	r2, [pc, #232]	; (8004194 <TIM_Base_SetConfig+0x124>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d108      	bne.n	80040c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2f      	ldr	r2, [pc, #188]	; (8004184 <TIM_Base_SetConfig+0x114>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02b      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d027      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <TIM_Base_SetConfig+0x118>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d023      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a2b      	ldr	r2, [pc, #172]	; (800418c <TIM_Base_SetConfig+0x11c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d01f      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2a      	ldr	r2, [pc, #168]	; (8004190 <TIM_Base_SetConfig+0x120>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01b      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a29      	ldr	r2, [pc, #164]	; (8004194 <TIM_Base_SetConfig+0x124>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d017      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a28      	ldr	r2, [pc, #160]	; (8004198 <TIM_Base_SetConfig+0x128>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a27      	ldr	r2, [pc, #156]	; (800419c <TIM_Base_SetConfig+0x12c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00f      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a26      	ldr	r2, [pc, #152]	; (80041a0 <TIM_Base_SetConfig+0x130>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00b      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a25      	ldr	r2, [pc, #148]	; (80041a4 <TIM_Base_SetConfig+0x134>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d007      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a24      	ldr	r2, [pc, #144]	; (80041a8 <TIM_Base_SetConfig+0x138>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d003      	beq.n	8004122 <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a23      	ldr	r2, [pc, #140]	; (80041ac <TIM_Base_SetConfig+0x13c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d108      	bne.n	8004134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <TIM_Base_SetConfig+0x114>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d003      	beq.n	8004168 <TIM_Base_SetConfig+0xf8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <TIM_Base_SetConfig+0x124>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d103      	bne.n	8004170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	615a      	str	r2, [r3, #20]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40010400 	.word	0x40010400
 8004198:	40014000 	.word	0x40014000
 800419c:	40014400 	.word	0x40014400
 80041a0:	40014800 	.word	0x40014800
 80041a4:	40001800 	.word	0x40001800
 80041a8:	40001c00 	.word	0x40001c00
 80041ac:	40002000 	.word	0x40002000

080041b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0201 	bic.w	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 030a 	bic.w	r3, r3, #10
 80041ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420e:	b480      	push	{r7}
 8004210:	b087      	sub	sp, #28
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0210 	bic.w	r2, r3, #16
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	031b      	lsls	r3, r3, #12
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800424a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	f043 0307 	orr.w	r3, r3, #7
 8004290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	609a      	str	r2, [r3, #8]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	021a      	lsls	r2, r3, #8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e05a      	b.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a21      	ldr	r2, [pc, #132]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d022      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d01d      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d018      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00e      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d009      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a17      	ldr	r2, [pc, #92]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10c      	bne.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800438c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	4313      	orrs	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40000800 	.word	0x40000800
 80043cc:	40000c00 	.word	0x40000c00
 80043d0:	40010400 	.word	0x40010400
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40001800 	.word	0x40001800

080043dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800441c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <FSMC_NORSRAM_Init+0xa0>)
 8004422:	4013      	ands	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800442e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004434:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800443a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004440:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004446:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800444c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004452:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004458:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800445e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004464:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800446a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004470:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d103      	bne.n	8004488 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004486:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	fff00080 	.word	0xfff00080

080044a8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80044ca:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044d6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80044de:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80044e6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80044f0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	3b02      	subs	r3, #2
 80044f8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80044fa:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004500:	4313      	orrs	r3, r2
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6979      	ldr	r1, [r7, #20]
 8004510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800453c:	d122      	bne.n	8004584 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004546:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800454c:	4013      	ands	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800455a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004562:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800456a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004570:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6979      	ldr	r1, [r7, #20]
 800457e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004582:	e005      	b.n	8004590 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800458c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	cff00000 	.word	0xcff00000

080045a4 <__libc_init_array>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	4d0d      	ldr	r5, [pc, #52]	; (80045dc <__libc_init_array+0x38>)
 80045a8:	4c0d      	ldr	r4, [pc, #52]	; (80045e0 <__libc_init_array+0x3c>)
 80045aa:	1b64      	subs	r4, r4, r5
 80045ac:	10a4      	asrs	r4, r4, #2
 80045ae:	2600      	movs	r6, #0
 80045b0:	42a6      	cmp	r6, r4
 80045b2:	d109      	bne.n	80045c8 <__libc_init_array+0x24>
 80045b4:	4d0b      	ldr	r5, [pc, #44]	; (80045e4 <__libc_init_array+0x40>)
 80045b6:	4c0c      	ldr	r4, [pc, #48]	; (80045e8 <__libc_init_array+0x44>)
 80045b8:	f000 f820 	bl	80045fc <_init>
 80045bc:	1b64      	subs	r4, r4, r5
 80045be:	10a4      	asrs	r4, r4, #2
 80045c0:	2600      	movs	r6, #0
 80045c2:	42a6      	cmp	r6, r4
 80045c4:	d105      	bne.n	80045d2 <__libc_init_array+0x2e>
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045cc:	4798      	blx	r3
 80045ce:	3601      	adds	r6, #1
 80045d0:	e7ee      	b.n	80045b0 <__libc_init_array+0xc>
 80045d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d6:	4798      	blx	r3
 80045d8:	3601      	adds	r6, #1
 80045da:	e7f2      	b.n	80045c2 <__libc_init_array+0x1e>
 80045dc:	080075ac 	.word	0x080075ac
 80045e0:	080075ac 	.word	0x080075ac
 80045e4:	080075ac 	.word	0x080075ac
 80045e8:	080075b0 	.word	0x080075b0

080045ec <memset>:
 80045ec:	4402      	add	r2, r0
 80045ee:	4603      	mov	r3, r0
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d100      	bne.n	80045f6 <memset+0xa>
 80045f4:	4770      	bx	lr
 80045f6:	f803 1b01 	strb.w	r1, [r3], #1
 80045fa:	e7f9      	b.n	80045f0 <memset+0x4>

080045fc <_init>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr

08004608 <_fini>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr
